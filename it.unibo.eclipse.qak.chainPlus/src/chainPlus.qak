System chainPlus
//mqttBroker "localhost" : 1883

Event    local_buttonCmd : local_buttonCmd(X)  
Event    ledCmd : ledCmd(X)  
 
Dispatch ledCmd : ledCmd(X) 
Dispatch ledRegister   : ledRegister( LEDNAME, CTXNAME ) 
Dispatch ledUnRegister : ledUnRegister( LEDNAME, CTXNAME ) 
    
Context ctxButton      ip [host="localhost" port=8010]  
Context ctxLedsPlus    ip [host="localhost" port=8050]  //192.168.43.229
//Context ctxLedRasp     ip [host="192.168.43.18"  port=8040] 

CodedQActor led1 context ctxLedsPlus className "resources.LedActork"  
CodedQActor led2 context ctxLedsPlus className "resources.LedActork"  
//CodedQActor ledArduino context ctxLedsPlus className "resources.LedOnArduinoActork" 
//CodedQActor ledRasp context ctxLedRasp  className "resources.LedOnRasp" 
 
QActor button context ctxButton {	//generates local_buttonCmd 
	State s0 initial { 
		run resources.buttonForChain.create()                      
	}    
} 

QActor control context ctxButton {
["lateinit var ledNames : List<String>"]
	State s0 initial {		           
		solve( consult("sysRules.pl")	 )       
		solve( consult("chainDescr.pl")	 )  
		solve( getLedNames(N) , N   )
		["ledNames = sysUtil.strRepToList(resVar!!); println(ledNames)"]        
	}     
	Goto work   
	 
	State work{		println(" ----------------- work ---------------------- ")         		
	}  
	Transition t0 whenEvent local_buttonCmd -> blinkChain
	              whenMsg   ledRegister     -> addLed
	
	State blinkChain{
		solve( resetLedCounter )	   
	}
	Goto doBlinkChain
	
	State doBlinkChain{   
		solve( getNextLedName( LEDNAME ) , LEDNAME  ) 				
[" 
if( solveOk() ){
    println(\"current led name = $resVar\")   
	forward( \"ledCmd\", \"ledCmd(on)\", resVar )
	delay(200)
	forward( \"ledCmd\", \"ledCmd(off)\", resVar )
}
"]		 
	}
	Transition t1 whenTime 200     -> doBlinkChain
	              whenMsg   ledRegister     -> addLed
	              whenMsg   ledUnRegister   -> removeLed
				  whenEvent local_buttonCmd -> work          
	
	State addLed{
		onMsg( ledRegister : ledRegister( LEDNAME, CTXNAME ) ) {
			println("control ADDING ${meta_msgArg(0)} from CONTEXT ${meta_msgArg(1)}")			  
			solve( addLed("${meta_msgArg(0)}") )
["sysUtil.setActorContextName(meta_msgArg(0), meta_msgArg(1))  //update system knowledge"]
		}
	}	 
	Goto blinkChain  //resumeLastPlan
			  
	State removeLed{
		onMsg( ledUnRegister : ledUnRegister( LEDNAME, CTXNAME ) ) {
			println("REMOVING ${meta_msgArg(0)}")
 		    solve( removeLed("${meta_msgArg(0)}") )
		}
	}	  
	Goto blinkChain	 //resumeLastPlan
} 	 


//JUST FOR TESTING ...	  
QActor dynamo context ctxLedsPlus {
	State s0 initial{    
		println("dynamo START")
	} 
	Transition t0 whenTime 3000 -> sAdd         
	    
	State sAdd{      
["for(i in 0..1){ 
	val ledName = resources.ledManager.addNewLed( myself  ) 
	println(\"ledRegister($ledName, ${context!!.name})\")
	forward( \"ledRegister\", \"ledRegister($ledName, ${context!!.name})\", \"control\" )
    delay( 1000 ) 
}
"]
	}  
	Transition t0 whenTime 3000 -> sRemove
	 
	State sRemove{
["val led = resources.ledManager.removeLastLed( myself  ) 
if( led != null ){ 
  println(\"ledUnRegister(${led.name}, ${context!!.name})\")
  forward( \"ledUnRegister\", \"ledUnRegister(${led.name}, ${context!!.name} )\", \"control\" )
  delay( 1000 )
  led.terminate()     //please complete (normally) what you were doing and terminate
}
"]
	} 
	//Goto s0
} 

  

	
	 
 
   
