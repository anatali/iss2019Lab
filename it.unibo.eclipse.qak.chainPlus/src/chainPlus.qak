System chainPlus

Event    local_buttonCmd : local_buttonCmd(X)  
Event    ledCmd : ledCmd(X)  
Dispatch ledCmd : ledCmd(X)  
   
Context ctxButton      ip [host="192.168.43.229" port=8010]
Context ctxLedsPlus    ip [host="192.168.43.229" port=8050]
//Context ctxLedRasp     ip [host="192.168.43.18"  port=8040]

CodedQActor led1 context ctxLedsPlus className "resources.LedActork"  
CodedQActor led2 context ctxLedsPlus className "resources.LedActork"  
//CodedQActor led2 context ctxLedsPlus className "resources.LedOnArduinoActork" 
//CodedQActor led3 context ctxLedRasp  className "resources.LedOnRasp" 

QActor button context ctxButton {	//generates local_buttonCmd 
	State s0 initial { 
		run resources.buttonForChain.create()                      
	}    
} 

QActor control context ctxButton {
["lateinit var ledNames : List<String>"]
	State s0 initial {		           
		solve( consult("chainDescr.pl")	 )        
		solve( getLedNames(N) , N   )
		["ledNames = sysUtil.strRepToList(resVar!!); println(ledNames)"]        
	}     
	Goto work   
	 
	State work{		        
 		solve( resetLedCounter )	
 		//println("resetLedCounter result = $resVar")	
	}  
	Transition t0 whenEvent local_buttonCmd -> blinkChain
	 
	State blinkChain{   
		solve( getNextLedName( LEDNAME ) , LEDNAME  ) 
[" 
if( solveOk() ){
    //println(\"current led name = $resVar\")   
	forward( \"ledCmd\", \"ledCmd(on)\", resVar )
	delay(200)
	forward( \"ledCmd\", \"ledCmd(off)\", resVar )
}else solve(\"resetLedCounter\")
"]		 
	}
	Transition t1 whenTime 10 -> blinkChain 
				  whenEvent local_buttonCmd -> work          
				  
} 
/* 	
	State sOn{  
 		//emit  ledCmd : ledCmd(on)
 		["forward( \"ledCmd\", \"ledCmd(on)\", curLedName )"]	
	}
	Transition t1 whenTime 200 -> sOff 
				  whenEvent local_buttonCmd -> work           
 
	State sOff{   
 		//emit   ledCmd : ledCmd(off)
 		["forward( \"ledCmd\", \"ledCmd(off)\", curLedName )"]
	}
	Transition t2 	whenTime 200 -> sOn  
   		          	whenEvent local_buttonCmd -> work
}   
*/
/* 
QActor dynamo context ctxLedsPlus {
	State s0 initial{   
		//println("dynamo START")
	} 
	Transition t0 whenTime 3000 -> sAdd         
	   
	State sAdd{    
		run resources.ledManager.addNewLed()
	} 
	Transition t0 whenTime 4000 -> sRemove
	 
	State sRemove{
		run resources.ledManager.removeLed()
	} 
	Goto s0
	
	 
 
*/  
