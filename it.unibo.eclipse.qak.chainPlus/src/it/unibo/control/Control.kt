/* Generated by AN DISI Unibo */ 
package it.unibo.control

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Control ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		lateinit var ledNames : List<String>
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('chainDescr.pl')","") //set resVar	
						solve("getLedNames(N)","N") //set resVar	
						ledNames = sysUtil.strRepToList(resVar!!); println(ledNames)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						solve("resetLedCounter","") //set resVar	
					}
					 transition(edgeName="t00",targetState="blinkChain",cond=whenEvent("local_buttonCmd"))
				}	 
				state("blinkChain") { //this:State
					action { //it:State
						solve("getNextLedName(LEDNAME)","LEDNAME") //set resVar	
						 
						if( solveOk() ){
						    //println("current led name = $resVar")   
							forward( "ledCmd", "ledCmd(on)", resVar )
							delay(200)
							forward( "ledCmd", "ledCmd(off)", resVar )
						}else solve("resetLedCounter")
						TimerActor("timer", scope, context!!, "local_tout_blinkChain", 10.toLong())
					}
					 transition(edgeName="t11",targetState="blinkChain",cond=whenTimeout("local_tout_blinkChain"))   
					transition(edgeName="t12",targetState="work",cond=whenEvent("local_buttonCmd"))
				}	 
			}
		}
}
