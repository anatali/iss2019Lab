/* Generated by AN DISI Unibo */ 
package it.unibo.kb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Kb ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var CHAINCOUNTER = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('userKb.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleUnfiy", cond=doswitch() )
				}	 
				state("exampleUnfiy") { //this:State
					action { //it:State
						println(" ------------ exampleUnfiy  ------------ ")
						solve("unify(p(X,X),p(1,2))","X") //set resVar	
						println(currentSolution)
						solve("unify(p(X,b(X)),p(1,Y))","") //set resVar	
						println(currentSolution)
						println("X=${getCurSol("X")} Y=${getCurSol("Y")}")
					}
					 transition( edgeName="goto",targetState="exampleKb1", cond=doswitch() )
				}	 
				state("exampleKb1") { //this:State
					action { //it:State
						println(" ------------ exampleKb1    ------------ ")
						solve("chain(N,LED)","") //set resVar	
						println("N=${getCurSol("N")} LED=${getCurSol("LED")}")
						solve("getLedNames(LEDNAMES)","") //set resVar	
						println(getCurSol("LEDNAMES"))
					}
					 transition( edgeName="goto",targetState="exampleKb2Init", cond=doswitch() )
				}	 
				state("exampleKb2Init") { //this:State
					action { //it:State
						CHAINCOUNTER=1
						println(" ------------ INIT exampleKb2    ------------ ")
					}
					 transition( edgeName="goto",targetState="exampleKb2", cond=doswitch() )
				}	 
				state("exampleKb2") { //this:State
					action { //it:State
						solve("chain($CHAINCOUNTER,LED)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleKb2continue", cond=doswitchGuarded({currentSolution.isSuccess() }) )
					transition( edgeName="goto",targetState="exampleKb2end", cond=doswitchGuarded({! currentSolution.isSuccess() }) )
				}	 
				state("exampleKb2continue") { //this:State
					action { //it:State
						println("LED=${getCurSol("LED")}")
						CHAINCOUNTER++
					}
					 transition( edgeName="goto",targetState="exampleKb2", cond=doswitch() )
				}	 
				state("exampleKb2end") { //this:State
					action { //it:State
						println(" ------------ END exampleKb2    ------------ ")
					}
					 transition( edgeName="goto",targetState="exampleKb2Coded", cond=doswitch() )
				}	 
				state("exampleKb2Coded") { //this:State
					action { //it:State
						println(" ------------ exampleKb2Coded    ------------ ")
						CHAINCOUNTER=1
								 do{
									solve( "chain($CHAINCOUNTER,LED) " )
						            if(currentSolution.isSuccess()){
										 val curLed = getCurSol("LED")
										 println( "LED=$curLed " )
										 CHAINCOUNTER++
									}
								 }while(currentSolution.isSuccess())			
					}
					 transition( edgeName="goto",targetState="exampleKb2PrologInit", cond=doswitch() )
				}	 
				state("exampleKb2PrologInit") { //this:State
					action { //it:State
						println(" ------------ INIT exampleKb2Prolog    ------------ ")
						solve("initStepCounter","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleKb2Prolog", cond=doswitch() )
				}	 
				state("exampleKb2Prolog") { //this:State
					action { //it:State
						solve("getNextLedName(LED)","") //set resVar	
						if(currentSolution.isSuccess()) println(getCurSol("LED").toString())
						 		else{
						 			 println("no more leds")
						 		}
					}
					 transition( edgeName="goto",targetState="exampleKb2Prolog", cond=doswitchGuarded({currentSolution.isSuccess()}) )
					transition( edgeName="goto",targetState="endOfWork", cond=doswitchGuarded({! currentSolution.isSuccess()}) )
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						println(" ------------ BYE    ------------ ")
					}
				}	 
			}
		}
}
