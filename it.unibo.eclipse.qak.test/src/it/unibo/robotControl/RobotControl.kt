/* Generated by AN DISI Unibo */ 
package it.unibo.robotControl

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class RobotControl ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t010",targetState="moveAhead",cond=whenEvent("local_buttonCmd"))
				}	 
				state("moveAhead") { //this:State
					action { //it:State
						forward("send", "msg(moveforward)" ,"clienttcp" ) 
						TimerActor("timer", scope, context!!, "local_tout_moveAhead", 1500.toLong())
					}
					 transition(edgeName="t111",targetState="moveBack",cond=whenTimeout("local_tout_moveAhead"))   
					transition(edgeName="t112",targetState="s0",cond=whenEvent("local_buttonCmd"))
					transition(edgeName="t113",targetState="handleCollision",cond=whenEvent("collision"))
				}	 
				state("moveBack") { //this:State
					action { //it:State
						forward("send", "msg(movebackward)" ,"clienttcp" ) 
						TimerActor("timer", scope, context!!, "local_tout_moveBack", 1500.toLong())
					}
					 transition(edgeName="t114",targetState="moveAhead",cond=whenTimeout("local_tout_moveBack"))   
					transition(edgeName="t115",targetState="s0",cond=whenEvent("local_buttonCmd"))
					transition(edgeName="t116",targetState="handleCollision",cond=whenEvent("collision"))
				}	 
				state("handleCollision") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("send", "msg(stop)" ,"clienttcp" ) 
						forward("send", "msg(moveleft)" ,"clienttcp" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
