/* Generated by AN DISI Unibo */ 
package it.unibo.control

import it.unibo.kactor.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Control ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t02",targetState="sOn",cond=whenDispatch("buttonCmd"))
				}	 
				state("sOn") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("ledCmd","ledCmd(on)") 
						timerEventName = "local_tout${timerCount++}"
						TimerActor("timer", scope, context!!, timerEventName, 200.toLong())
					}
					 transition(edgeName="t13",targetState="sOff",cond=whenTimeout(200))
					transition(edgeName="t14",targetState="s0",cond=whenDispatch("buttonCmd"))
				}	 
				state("sOff") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						emit("ledCmd","ledCmd(off)") 
						timerEventName = "local_tout${timerCount++}"
						TimerActor("timer", scope, context!!, timerEventName, 200.toLong())
					}
					 transition(edgeName="t25",targetState="sOn",cond=whenTimeout(200))
					transition(edgeName="t26",targetState="s0",cond=whenDispatch("buttonCmd"))
				}	 
			}
		}
}
