/* Generated by AN DISI Unibo */ 
package it.unibo.led1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led1 ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						var curT : Term //used by onMsg
						resources.myLedSegm.create(  )
					}
					 transition(edgeName="ta17",targetState="s1",cond=whenEvent("ledCmd"))
				}	 
				state("s1") { //this:State
					action { //it:State
						var curT : Term //used by onMsg
						println("$name in ${currentState.stateName} | $currentMsg")
						curT = Term.createTerm("ledCmd(on)")
						if( currentMsg.msgId()=="ledCmd" && 
							pengine.unify(curT, Term.createTerm("ledCmd(X)")) && 
							pengine.unify(curT, Term.createTerm( currentMsg.msgContent() ) )){ 
								resources.myLedSegm.turnOn(  )
						}
						curT = Term.createTerm("ledCmd(off)")
						if( currentMsg.msgId()=="ledCmd" && 
							pengine.unify(curT, Term.createTerm("ledCmd(X)")) && 
							pengine.unify(curT, Term.createTerm( currentMsg.msgContent() ) )){ 
								resources.myLedSegm.turnOff(  )
						}
					}
					 transition(edgeName="tb18",targetState="s1",cond=whenEvent("ledCmd"))
				}	 
			}
		}
}
