System chain           
 
Dispatch click : clicked 
Dispatch send  : msg(X)

Event    local_buttonCmd : local_buttonCmd(X)  
Event    buttonCmd : buttonCmd(X) 
Event    ledCmd : ledCmd(X)  
Event    collision : collision(X)
Event    sonar  	 : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event    sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event    realSonar   : sonar( DISTANCE )				//From real sonar on real robot
Event    polar       : p( Distance, Angle )  
Event   local_radarReady  : radargui( STATE )  		//STATE = ready|off


Context ctxButton ip [host="localhost" port=8010]
Context ctxLeds1  ip [host="localhost" port=8020]

QActor button context ctxButton {	
	State s0 initial { 
		run resources.buttonForChain.create()                      
	} 
	Transition t0 whenMsg click -> s1  

	State s1{
		printCurrentMessage
		forward control -m buttonCmd : buttonCmd
	}
	Transition t1 whenMsg click -> s1            
}
/*
 * CONTROL for LED
 */
QActor control context ctxButton {
	State s0 initial {		 
		printCurrentMessage	             
	} 
	Transition t0 whenMsg buttonCmd -> sOn    
	              whenEvent local_buttonCmd -> sOn
	State sOn{  
		printCurrentMessage
		emit  ledCmd : ledCmd(on)
	}
	Transition t1 whenTime 200 -> sOff 
				  whenMsg buttonCmd -> s0   
				  whenEvent local_buttonCmd -> s0           
 
	State sOff{  
		printCurrentMessage
		emit   ledCmd : ledCmd(off)
	}
	Transition t2 	whenTime 200 -> sOn  
					whenMsg buttonCmd -> s0
   		          	whenEvent local_buttonCmd -> s0
}   
/*
 *  CONTROL for ROBOT
 */
CodedQActor clienttcp context ctxButton className "resources.clientWenvTcp"

QActor robotcontrol context ctxButton{ 
	State s0 initial {		 
		printCurrentMessage	
 	}   
	Transition t0 whenEvent local_buttonCmd -> moveAhead 
	
	State moveAhead{
		forward clienttcp -m send : msg( moveforward )
	}
	Transition t1 whenTime  1500 -> moveBack  
				  whenEvent local_buttonCmd -> s0 
		          whenEvent collision -> handleCollision

	State moveBack{
		forward clienttcp -m send : msg( movebackward  )		
	}
	Transition t1 whenTime  1500 -> moveAhead  
				  whenEvent local_buttonCmd -> s0 
		          whenEvent collision -> handleCollision
		          
	State handleCollision{
		printCurrentMessage
		forward clienttcp -m send : msg( stop  )
		forward clienttcp -m send : msg( moveleft  )
		//forward clienttcp -m send : msg( moveleft  )
 	}
	Goto s0 
	          
 }
 
 /*
  * 
  */
 QActor sonardetector context ctxButton{
 	State init initial{
		println("sonardetector STARTS ")
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t1 whenTime 60000 -> endOfJob   
 		   whenEvent sonar       ->  sendToRadar
  		   whenEvent sonarDetect ->  showObstacle
 		  //whenEvent realSonar   ->  handleRealSonar
 	  
 	State sendToRadar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar : sonar(SONAR,TARGET,DISTANCE ) ){     
			emit polar : p( payloadArg(2), 90  )  //90 is the angle
 		}
 	}
 	Goto waitForEvents
 	
 	State showObstacle{
 		println("showObstacle")
 	}
 	Goto waitForEvents
 	
 	State endOfJob{}
 }

/*
 * LED
 */
QActor led1 context ctxLeds1 { 
	State s0 initial { 
		 run resources.myLedSegm.create() 
	}    
	Transition ta whenEvent ledCmd -> s1
 	
	State s1   {           
		 printCurrentMessage  
		 onMsg ( ledCmd:ledCmd(on) ){ run resources.myLedSegm.turnOn() }
 		 onMsg ( ledCmd:ledCmd(off) ){ run resources.myLedSegm.turnOff() }
	} 
 	Transition tb whenEvent ledCmd -> s1            	
} 

/*
 * RADAR
 */
   
 QActor radarcontrol context ctxButton{
	State s0 initial {  
		 println("radarControl init the GUI ... ") 
		 run resources.radarSupport.create()
		 //emit -e local_radarReady : radargui( ready )
	}   
	Goto waitDataToShow
	 
	State waitDataToShow{
		//println("radarControl WAITSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS ... ") 
	}  
	Transition t1 whenEvent polar -> handleData
	   
	State handleData{   
		printCurrentMessage
		onMsg( polar : p(D,A) ) { 
			run resources.radarSupport.sendData( payloadArg(0),  payloadArg(1) ) 
		}
	} 
	Goto waitDataToShow
 	
 }
/* 
QActor led context ctxLeds1 { 
	[ "val led = resources.myLedSegm()" ]
	State s0 initial {
		 //run resources.myLedSegm() 
 	}   
	Transition ta whenEvent ledCmd -> s1
 	
	State s1   {           
		 printCurrentMessage  
		 //onMsg ledCmd:ledCmd(on) -> resources.myLedSegm.turnOn()
 		 //run resources.myLedSegm.turnOn()
 		 [ "led.turnOn()" ]
	} 
	Transition tb whenEvent ledCmd -> s2            
 	
 	State s2   {            
		 printCurrentMessage  
		 //run resources.myLedSegm.turnOff()
		 [ "led.turnOff()" ]
	} 
	Transition tb whenEvent ledCmd -> s1            	
}   
*/
  

/*
 * check msg content (onMsg ...
 * autoMsg
 * timeout
 * ID estesi com maiuscole
 */