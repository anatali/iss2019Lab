System chain

Dispatch click : clicked
Dispatch m1 : m1(X) 

Event    local_buttonCmd : local_buttonCmd(X)  
Event    buttonCmd : buttonCmd(X) 
Event    ledCmd : ledCmd(X)  

Context ctxButton ip [host="localhost" port=8010]
Context ctxLeds1  ip [host="localhost" port=8020]

QActor button context ctxButton {	
	State s0 initial {
		run resources.buttonForChain.create()                      
	} 
	Transition t0 whenMsg click -> s1  

	State s1{
		printCurrentMessage
		forward control -m buttonCmd : buttonCmd
	}
	Transition t1 whenMsg click -> s1            
}
QActor control context ctxButton {
	State s0 initial {		 
		printCurrentMessage	            
	} 
	Transition t0 whenMsg buttonCmd -> s1    
	 
	State s1{
		printCurrentMessage
		emit -e ledCmd : ledCmd(on)
		delay 200
 		emit -e ledCmd : ledCmd(off) 
		delay 200
 		forward control -m m1 : m1(a)
	}
	Transition t1 whenMsg buttonCmd -> s2
	               whenMsg m1 -> s1
 
	State s2{  }
	Transition t2 whenMsg buttonCmd -> s3
	
	State s3{  }
	Transition t3  whenMsg m1 -> s1
  		          	
}   

QActor led context ctxLeds1 { 
	[ "val led = resources.myLedSegm()" ]
	State s0 initial {
		 //run resources.myLedSegm() 
 	}   
	Transition ta whenEvent ledCmd -> s1
 	
	State s1   {           
		 printCurrentMessage  
		 //onMsg ledCmd:ledCmd(on) -> resources.myLedSegm.turnOn()
 		 //run resources.myLedSegm.turnOn()
 		 [ "led.turnOn()" ]
	} 
	Transition tb whenEvent ledCmd -> s2            
 	
 	State s2   {            
		 printCurrentMessage  
		 //run resources.myLedSegm.turnOff()
		 [ "led.turnOff()" ]
	} 
	Transition tb whenEvent ledCmd -> s1            	
}   

QActor led1 context ctxLeds1 { 
	State s0 initial {
		 run resources.myLedSegm.create() 
	}   
	Transition ta whenEvent ledCmd -> s1
 	
	State s1   {           
		 printCurrentMessage  
		 //onMsg ledCmd:ledCmd(on) -> resources.myLedSegm.turnOn()
 		 run resources.myLedSegm.turnOn()
	} 
	Transition tb whenEvent ledCmd -> s2            
 	
 	State s2   {            
		 printCurrentMessage  
		 run resources.myLedSegm.turnOff()
	} 
	Transition tb whenEvent ledCmd -> s1            	
}   

/*
 * autoMsg
 * check msg content (onMsg ...
 * timeout
 * ID estesi com maiuscole
 */