/* Generated by AN DISI Unibo */ 
package it.unibo.appltest

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Appltest ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var stepCounter = 0 
		var Curmove = ""
		var curmoveIsForward = false
		var StepTime   = 2700L	//long		//330L	//for virtual
		var RotateTime = 610L	//long		//300L	//for virtual
		var PauseTime  = 500L 
		var foundObstacle = false 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  appltest STARTED")
						forward("modelChange", "modelChange(robot,w)" ,"resourcemodel" ) 
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_appltest_s0", StepTime )
					}
					 transition(edgeName="t00",targetState="endDoMoveForward",cond=whenTimeout("local_tout_appltest_s0"))   
					transition(edgeName="t01",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
				state("endDoMoveForward") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
					}
				}	 
				state("handleSonarRobot") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val distance = Integer.parseInt( payloadArg(0) ) 
								              println( "distance= $distance"  )
								              foundObstacle = (distance < 15 ) 
								              println( "foundObstacle= $foundObstacle"  )
						}
					}
					 transition( edgeName="goto",targetState="stepFail", cond=doswitchGuarded({foundObstacle}) )
					transition( edgeName="goto",targetState="s0", cond=doswitchGuarded({! foundObstacle}) )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						println("&&& onecellforward stepfail ")
					}
				}	 
			}
		}
}
