/* Generated by AN DISI Unibo */ 
package it.unibo.robotmindapplication

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmindapplication ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('floorMap.pl')","") //set resVar	
						println("robotmindapplication STARTED")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="endApplication",cond=whenDispatch("stopAppl"))
					transition(edgeName="t03",targetState="doApplication",cond=whenDispatch("startAppl"))
				}	 
				state("doApplication") { //this:State
					action { //it:State
						println("robotmindapplication doApplication ... ")
						forward("onestep", "onestep" ,"onecellforward" ) 
					}
					 transition(edgeName="t04",targetState="hadleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t05",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("endApplication") { //this:State
					action { //it:State
						println("robotmindapplication endApplication ... ")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("hadleStepOk") { //this:State
					action { //it:State
						println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ ")
						solve("updateMapAfterStep","") //set resVar	
					}
					 transition( edgeName="goto",targetState="doApplication", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFf  ")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
