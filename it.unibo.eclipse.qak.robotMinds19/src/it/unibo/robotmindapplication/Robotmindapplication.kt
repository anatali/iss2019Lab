/* Generated by AN DISI Unibo */ 
package it.unibo.robotmindapplication

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmindapplication ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		//REAL ROBOT 
		//var StepTime   = 1000	 
		//var PauseTime  = 500L 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	//330	 
		var PauseTime  = 250  
		
		var StepTimeL  = StepTime.toLong()
		var PauseTimeL = PauseTime.toLong()
		
		var newDir = ""
		
		var RotCount = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('floorMap.pl')","") //set resVar	
						solve("consult('basicRobotConfig.pl')","") //set resVar	
						solve("robot(R,_)","R") //set resVar	
						
						val robotType  = currentSolution.getVarValue("R").toString()
						val isVirtual  = robotType.equals("virtual")
						println("robotType = $robotType,  isVirtual = $isVirtual")
						if(isVirtual){ itunibo.coap.observer.resourceObserverCoapClient.create( "coap://localhost/resourcemodel"  )
						 }
						else
						 { itunibo.coap.observer.resourceObserverCoapClient.create( "coap://192.168.1.2:5683/resourcemodel"  )
						  }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("doRotation") { //this:State
					action { //it:State
						solve("dialog('REPEAT')","") //set resVar	
						RotCount = 0
					}
					 transition( edgeName="goto",targetState="tuneRoation", cond=doswitch() )
				}	 
				state("tuneRoation") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,l)" ,"resourcemodel" ) 
						RotCount++
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="tuneRoation", cond=doswitchGuarded({(RotCount<4)}) )
					transition( edgeName="goto",targetState="doRotation", cond=doswitchGuarded({! (RotCount<4)}) )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& robotmindapplication waitCmd ... ")
					}
					 transition(edgeName="t00",targetState="startApplication",cond=whenDispatch("startAppl"))
				}	 
				state("startApplication") { //this:State
					action { //it:State
						solve("initMap(sud)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="doApplication", cond=doswitch() )
				}	 
				state("doApplication") { //this:State
					action { //it:State
						println("&&& robotmindapplication doApplication StepTime = $StepTime")
						forward("onestep", "onestep($StepTime)" ,"onestepahead" ) 
					}
					 transition(edgeName="t01",targetState="hadleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t02",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
					transition(edgeName="t03",targetState="handleStopAppl",cond=whenEvent("stopAppl"))
				}	 
				state("handleStopAppl") { //this:State
					action { //it:State
						println("APPLICATION STOPPED. Waiting for a reactivate")
					}
					 transition(edgeName="t04",targetState="handleReactivateAppl",cond=whenEvent("reactivateAppl"))
				}	 
				state("handleReactivateAppl") { //this:State
					action { //it:State
						println("APPLICATION RESUMED")
					}
					 transition(edgeName="t05",targetState="hadleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t06",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("hadleStepOk") { //this:State
					action { //it:State
						solve("updateMapAfterStep","") //set resVar	
						delay(PauseTimeL)
					}
					 transition( edgeName="goto",targetState="doApplication", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(PauseTimeL)
						solve("changeDirection(NEWD)","") //set resVar	
						newDir = getCurSol("NEWD").toString()
						println("New direction=${newDir}")
						solve("showMap","") //set resVar	
						delay(PauseTimeL)
					}
					 transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({(newDir.equals( "sud" ) )}) )
					transition( edgeName="goto",targetState="doApplication", cond=doswitchGuarded({! (newDir.equals( "sud" ) )}) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("Work done")
					}
				}	 
			}
		}
}
