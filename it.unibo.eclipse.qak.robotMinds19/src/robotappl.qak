/*
 * Moves the robot along the boundary of an empty room
 * and builds a map of the room.
 * The map is a grid of square cells of size D, 
 * where D is the diameter of a circle including the robot.
 */
 System robotappl 
 
mqttBroker "localhost" : 1883    //192.168.1.18  192.168.43.229

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )   
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )   
 
Dispatch stopAppl      : stopAppl( CMD )
Dispatch startAppl     : startAppl( CMD )

Dispatch onestep       : onetstep( T )
Dispatch stepOk        : stepOk  
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time
 
Context ctxRobotAppl      ip [host="localhost"    port=8038]   -mqtt 
Context ctxDummyForMind   ip [host="dontcarehost" port=8035]   -mqtt 

ExternalQActor basicrobot     context ctxDummyForMind 
ExternalQActor resourcemodel  context ctxDummyForMind
ExternalQActor onestepahead   context ctxDummyForMind 
/* 
 * APPLICATION
 */
QActor robotmindapplication context ctxRobotAppl{
["
//REAL ROBOT
//var StepTime   = 1000	 
//var PauseTime  = 500L 

//VIRTUAL ROBOT
var StepTime   = 330	//330	 
var PauseTime  = 250  

var StepTimeL  = StepTime.toLong()
var PauseTimeL = PauseTime.toLong()

var newDir = \"\"
"]
	State s0 initial {	  
		solve( consult("sysRules.pl")	 )       
		solve( consult("floorMap.pl")	 )
		solve( consult("basicRobotConfig.pl")	 )
		solve( robot(R,_), R )
["
val robotType  = currentSolution.getVarValue(\"R\").toString()
val isVirtual  = robotType.equals(\"virtual\")
println(\"robotType = $robotType,  isVirtual = $isVirtual\")
"] 
		if "isVirtual" {
				run itunibo.coap.observer.resourceObserverCoapClient.create(
				"coap://localhost/resourcemodel")	
		}else{
			run itunibo.coap.observer.resourceObserverCoapClient.create(
				"coap://192.168.1.8:5683/resourcemodel")	
		}
 	}
	//Goto startApplication 
   	Goto waitCmd
   	 
	State waitCmd {		} 
	Transition t0 whenMsg stopAppl  -> stopApplication 
		          whenMsg startAppl -> startApplication 
	
	State stopApplication{
		println("&&& robotmindapplication stopApplication ... ")			
		forward resourcemodel  -m modelChange : modelChange(robot,h)
 		forward onestepahead   -m stopAppl    : stopAppl(user)
	} 
	Goto waitCmd
 	
	State startApplication{
		solve( initMap(sud) )
	} 
	Goto doApplication
	
	State doApplication{ 
		//println("&&& robotmindapplication doApplication")
		forward onestepahead -m onestep : onestep($StepTime)		
	}//wait for the answer
	Transition t0   whenMsg stepOk   -> hadleStepOk
					whenMsg stepFail -> hadleStepFail 
					whenMsg stopAppl -> stopApplication 
						
	State hadleStepOk{
		//println("&&& robotmindapplication step ok")	  
		solve( updateMapAfterStep )
		delayVar PauseTimeL 	 
	}
	Goto doApplication  
	   
	State hadleStepFail{
		printCurrentMessage		//stepFail(obstacle,T)
		//println("&&& robotmindapplication step failed")
		forward resourcemodel -m modelChange : modelChange(robot,a)
		delayVar PauseTimeL
		solve( changeDirection(NEWD) )
		["newDir = getCurSol(\"NEWD\").toString()"]
		println("New direction=${newDir}")
		solve( showMap ) 
 		delayVar PauseTimeL 
//		solve( dialog(F) )
	}
	Goto endOfJob  if "(newDir.equals( \"sud\" ) )" else doApplication
 	
	State endOfJob{
		println("Exploration done")
	}
	
	
}

//Application move step
/* 
QActor onecellforward context ctxRobotAppl {
[" var foundObstacle = false"]  
	State s0 initial {	   
		println("&&& robotmindapplication onecellforward waits ... ")	
		["foundObstacle = false "]
	}
	Transition t0 whenMsg onestep -> doMoveForward
	
	State doMoveForward{
 // 	forward basicrobot -m robotCmd : robotCmd( w )	//First do ...
// 		forward resourcemodel -m modelUpdate : modelUpdate(robot,w) //... then update the model
		forward resourcemodel -m modelChange : modelChange(robot,w)
	}
	Transition t0 whenTime 300           -> endDoMoveForward
	 			  whenMsg stopAppl       -> s0					
		          whenEvent sonarRobot   -> handleSonarRobot
		
	State endDoMoveForward{
// 		forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
// 		forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		forward resourcemodel -m modelChange : modelChange(robot,h)
		printCurrentMessage 
		println("&&& robotmindapplication endDoMoveForward ")
		forward robotmindapplication -m stepOk : stepOk  //answer
	}
	Goto s0
	
	State handleSonarRobot{  //before than the step time
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              foundObstacle = (distance<20) "]  
   		}
	}
	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{
		println("&&& robotmindapplication stepfail ")
		forward robotmindapplication -m stepFail : stepFail(obstacle,150) //answer (time todo)		
	}
	Goto s0
}
*/