System robotappl 
 
mqttBroker "localhost" : 1883    //192.168.1.18  192.168.43.229

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Dispatch robotCmd     : robotCmd( CMD )				  //sent by the mind to the basicrobot

Dispatch modelChange  : modelChange( TARGET, VALUE )   
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )   
 
Dispatch stopAppl      : stopAppl( CMD )
Dispatch startAppl     : startAppl( CMD )

Dispatch onestep       : onetstep
Dispatch stepOk        : stepOk  
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time
 
Context ctxRobotAppl      ip [host="localhost" port=8038]    	     -mqtt 
Context ctxDummyForMind   ip [host="otherresourcelocalhost" port=8035]   -mqtt 

ExternalQActor basicrobot    context ctxDummyForMind 
ExternalQActor resourcemodel context ctxDummyForMind
 
/* 
 * APPLICATION
 */
QActor robotmindapplication context ctxRobotAppl{
	State s0 initial {	  
		solve( consult("sysRules.pl")	 )       
		solve( consult("floorMap.pl")	 )
		println("&&&  robotmindapplication STARTED")	
	}
	Goto waitCmd
	 
	State waitCmd {		} 
	Transition t0 whenMsg stopAppl  -> stopApplication 
		          whenMsg startAppl -> startApplication 
	
	State stopApplication{
		println("&&& robotmindapplication stopApplication ... ")			
// 		forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
// 		forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		forward resourcemodel  -m modelChange : modelChange(robot,h)
 		forward onecellforward -m stopAppl : stopAppl(user)
	} 
	Goto waitCmd
//	Transition t0  // whenMsg stepOk   -> hadleStepOk
//					whenMsg stepFail -> hadleStepFail
	
	State startApplication{
		printCurrentMessage
		solve( initMap(sud) )
	} 
	Goto doApplication
	
	State doApplication{
		forward onecellforward -m onestep : onestep		
	}//wait the answer
	Transition t0   whenMsg stopAppl -> stopApplication 
					whenMsg stepOk   -> hadleStepOk
					whenMsg stepFail -> hadleStepFail 
						
	State hadleStepOk{
		println("&&& robotmindapplication step ok")	
		solve( updateMapAfterStep )
		delay 500 
	}
	Goto doApplication
	 
	State hadleStepFail{
		printCurrentMessage		
		println("&&& robotmindapplication step failed")
		forward resourcemodel -m modelChange : modelChange(robot,a)
		solve( changeDirection )
		solve( direction(D) )
		delay 500
	}
	Goto waitCmd  if "getCurSol(\"D\").toString().equals(\"sud\")" else doApplication
}

//Application move step
QActor onecellforward context ctxRobotAppl {
[" var foundObstacle = false"]  
	State s0 initial {	   
		println("&&& robotmindapplication onecellforward waits ... ")	
		["foundObstacle = false "]
	}
	Transition t0 whenMsg onestep -> doMoveForward
	
	State doMoveForward{
 // 	forward basicrobot -m robotCmd : robotCmd( w )	//First do ...
// 		forward resourcemodel -m modelUpdate : modelUpdate(robot,w) //... then update the model
		forward resourcemodel -m modelChange : modelChange(robot,w)
	}
	Transition t0 whenTime 300           -> endDoMoveForward
	 			  whenMsg stopAppl       -> s0					
		          whenEvent sonarRobot   -> handleSonarRobot
		
	State endDoMoveForward{
// 		forward basicrobot -m robotCmd : robotCmd( h )	//First do ...
// 		forward resourcemodel -m modelUpdate : modelUpdate(robot,h) //... then update the model
		forward resourcemodel -m modelChange : modelChange(robot,h)
		printCurrentMessage 
		println("&&& robotmindapplication endDoMoveForward ")
		forward robotmindapplication -m stepOk : stepOk  //answer
	}
	Goto s0
	
	State handleSonarRobot{  //before than the step time
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              foundObstacle = (distance<20) "]  
   		}
	}
	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{
		println("&&& robotmindapplication stepfail ")
		forward robotmindapplication -m stepFail : stepFail(obstacle,150) //answer (time todo)		
	}
	Goto s0
}
