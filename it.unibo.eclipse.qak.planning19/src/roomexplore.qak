/*
 * If no map exists,
 * 		explore the room boundary by using the planner
 * otherwise
 *      finds the position of the table
 */
System roomexplore
mqttBroker "localhost" : 1883  

Dispatch modelChange  : modelChange( TARGET, VALUE )   

Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Context ctxRoomExplore    ip [host="localhost" port=8038]    -mqtt 
Context ctxDummyForMind   ip [host="otherresourcelocalhost" port=8035]   -mqtt 

ExternalQActor resourcemodel context ctxDummyForMind

QActor roomexplorer context ctxRoomExplore{     
["
var mapEmpty  = false
var Tback      = 0L
var stepCounter = 0 
var Curmove = \"\"
var curmoveIsForward = false

//var StepTime   = 1000L	//long		/ 
////var RotateTime = 610L	//long		//300L	//for virtual
//var PauseTime  = 500L 

var StepTime   = 330L	//for virtual
var RotateTime = 300L	//for virtual
var PauseTime  = 500L 

var Direction = \"\" 
"]	
	State s0 initial {	
	    solve( consult("moves.pl")	 )
 		run itunibo.planner.plannerUtil.initAI()
 		run itunibo.planner.moveUtils.loadRoomMap( myself )	//assert mapdims/2
 		solve( mapdims(X,Y) )
 		["mapEmpty = ( getCurSol(\"X\").toString() == \"0\")"]
 	}
	Goto  exploreBoundary if "mapEmpty"  else findTable
	
	/*
	 * 1)  
	 */ 
	State exploreBoundary{
 		println("MAP AT START")
 		run itunibo.planner.plannerUtil.showMap()
  		solve( direction(D) )   
   		println("DIRECTION: ${getCurSol(\"D\").toString()}")
  	}
	Goto moveAhead  
	
	State moveAhead{
  		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")		//update map (there is always a first step)
		run itunibo.planner.plannerUtil.startTimer()
		forward onecellforward -m onestep : onestep($StepTime)	
 		delayVar PauseTime
 	}
	Transition t0   whenMsg stepOk   -> moveAhead   
					whenMsg stepFail -> changeDirection 

	State changeDirection{
  		forward resourcemodel -m modelChange : modelChange(robot,a) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, "a" )	    //update map
  		solve( direction(D) )   
  		["Direction = getCurSol(\"D\").toString() "] 
   		println("DIRECTION: ${getCurSol(\"D\").toString()}")
		run itunibo.planner.plannerUtil.showMap()
		run itunibo.planner.plannerUtil.saveMap("roomMap.txt")
   		//delayVar PauseTime						
  		//solve( dialog(F) )
	}
	Goto endOfExploreBoubdary if "(Direction==\"downDir\")" else moveAhead 
	
	State endOfExploreBoubdary{
		println("EXPLORATION ENDS")
 		//run itunibo.planner.plannerUtil.showMap()
 		//run itunibo.planner.plannerUtil.loadMap()		 
 	}
 	
 	State findTable{
 		println("findTable START")
 	}
 
	
	
	
}	

 

 
//Application move step
QActor onecellforward context ctxRoomExplore {
[" var foundObstacle = false; var StepTime = 0L"]  
	State s0 initial {	   
		["foundObstacle = false "]
	} 
	Transition t0 whenMsg onestep -> doMoveForward
	
	State doMoveForward{		  
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
			forward resourcemodel -m modelChange : modelChange(robot,w)
			run itunibo.planner.plannerUtil.startTimer()
		}
	} 
	Transition t0 whenTimeVar  StepTime -> endDoMoveForward		
 		          whenEvent sonarRobot  -> handleSonarRobot
		  
	State endDoMoveForward{
		forward resourcemodel -m modelChange : modelChange(robot,h)
		forward roomexplorer -m stepOk : stepOk(ok)  //answer
	}
	Goto s0
	
	//Substitute with an ad-hoc actor for a real robot
	State handleSonarRobot{  //before than the step time
		run itunibo.planner.moveUtils.setDuration(myself)
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              foundObstacle = (distance<20) "]  
   		}
	}
	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{
		println("&&& onecellforward stepfail ")
		solve( wduration( TIME ) )
		forward roomexplorer -m stepFail : stepFail(obstacle,#TIME)  	
	}
	Goto s0



}    

