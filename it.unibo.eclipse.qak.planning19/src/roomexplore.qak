/*
 * If no map exists,
 * 		explore the room boundary by using the planner
 * otherwise
 *      finds the position of the table
 */
System roomexplore 
mqttBroker "localhost" : 1883  

Dispatch modelChange  : modelChange( TARGET, VALUE )   

Dispatch onestep       : onestep(DURATION)
Dispatch stepOk        : stepOk(V)		//TODO eliminate  V
Dispatch stepFail      : stepFail(R,T) //R=ok | obstacle, T = time

Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Context ctxRoomExplore    ip [host="localhost" port=8038]    -mqtt 
Context ctxDummyForMind   ip [host="otherresourcelocalhost" port=8035]   -mqtt 

ExternalQActor resourcemodel context ctxDummyForMind

QActor roomexplorer context ctxRoomExplore{     
["
var mapEmpty    = false
var Tback       = 0L
var stepCounter = 0 
var Curmove     = \"\"
var Direction   = \"\" 
var MaxX        = 0
var MaxY        = 0
var CurX        = 0
var CurY        = 0
var GX          = 0
var GY          = 0
var TableFound  = false
var curmoveIsForward = false
var endTableEdge = false
var NunOfTurn       = 0

//var StepTime   = 1000L	//long		/ 
////var RotateTime = 610L	//long		//300L	//for virtual
//var PauseTime  = 500L 

var StepTime   = 330L	//for virtual
var RotateTime = 300L	//for virtual
var PauseTime  = 250L 


"]	
	State s0 initial {	
	    solve( consult("moves.pl")	 )
 		run itunibo.planner.plannerUtil.initAI()
 		run itunibo.planner.moveUtils.loadRoomMap( myself, "roomBoundary" )	//assert mapdims/2   
 		solve( mapdims(X,Y) )
 		["mapEmpty = ( getCurSol(\"X\").toString() == \"0\")"]
 	}
	Goto  exploreBoundary if "mapEmpty"  else findTable
	
	/*
	 * 1)  
	 */ 
	State exploreBoundary{
 		println("exploreBoundary")
 		run itunibo.planner.plannerUtil.showMap()
  		solve( direction(D) )   
   		println("DIRECTION: ${getCurSol(\"D\").toString()}")
  	}
	Goto moveAhead  
	
	State moveAhead{
  		run itunibo.planner.moveUtils.doPlannedMove(myself, "w") //update map (there is always a first step)
		run itunibo.planner.plannerUtil.startTimer()
		forward onestepahead -m onestep : onestep($StepTime)	
 		delayVar PauseTime
 	}
	Transition t0   whenMsg stepOk   -> moveAhead   
					whenMsg stepFail -> changeDirection 

	State changeDirection{
		solve( direction(D) )
		run itunibo.planner.moveUtils.doPlannedMove(myself, @D )	    //update map
  		
  		forward resourcemodel -m modelChange : modelChange(robot,a) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, "a" )	    //update map
  		
  		solve( direction(D) )   
  		["Direction = getCurSol(\"D\").toString() "] 
   		println("DIRECTION: ${getCurSol(\"D\").toString()}")
		run itunibo.planner.plannerUtil.showMap()
		run itunibo.planner.plannerUtil.saveMap("roomMap")
   		delayVar PauseTime						
  		solve( dialog(F) )
	}
	Goto findTable if "(Direction==\"downDir\")" else moveAhead 
	

/*
 * ===================================================================0
 */

 	 
 	State findTable{
 		solve( mapdims(MaxX,MaxY ) )
["
MaxX = Integer.parseInt( getCurSol(\"MaxX\").toString() )  
MaxY = Integer.parseInt( getCurSol(\"MaxY\").toString() )  
"] 
		run itunibo.planner.moveUtils.setPosition(myself) 
		solve( curPos(X,Y) )
["
CurX = Integer.parseInt( getCurSol(\"X\").toString() )  
CurY = Integer.parseInt( getCurSol(\"Y\").toString() )  
"] 
 		println("findTable START at ($CurX,$CurY) dims($MaxX,$MaxY)")
  	}
 	Goto stepRight 	
 	
 	 		
 	State stepRight{ 
   		forward resourcemodel -m modelChange : modelChange(robot,a) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, "a" )	    //update map
		
		run itunibo.planner.plannerUtil.startTimer()
		forward onestepahead -m onestep : onestep($StepTime)	
		delayVar PauseTime
		//solve( dialog(F) )	
 	}
	Transition t0   whenMsg stepOk   -> stepDown   
					whenMsg stepFail -> tableFound 

 	State stepDown{
   		run itunibo.planner.moveUtils.doPlannedMove(myself, "w") //update map (there is always a first step)
  		
  		forward resourcemodel -m modelChange : modelChange(robot,d) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, "d" )	    //update map
   		
  		run itunibo.planner.plannerUtil.startTimer()
		forward onestepahead -m onestep : onestep($StepTime)	
		delayVar PauseTime
		//solve( dialog(F) )	
 	}  
	Transition t0   whenMsg stepOk   -> updateMapAfterStepDown   
					whenMsg stepFail -> tableFound  
 	
 	State updateMapAfterStepDown{
    	run itunibo.planner.moveUtils.doPlannedMove(myself, "w") //update map (there is always a first step) 		
 	}
 	Goto stepRight 
 	
 	State tableFound{
 		printCurrentMessage
 		onMsg( stepFail : stepFail(Obs,Time) ) { 
 			["Tback=payloadArg(1).toString().toLong() / 2 "]
 			println("TABLE FOUND ${payloadArg(1).toString()}")
 		}
 		//Return in cell
  		forward resourcemodel -m modelChange : modelChange(robot,s) 
		delayVar Tback  
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
 		 		
		//run itunibo.planner.moveUtils.setPosition(myself) 
 		solve( direction(D) )
  		run itunibo.planner.moveUtils.doPlannedMove(myself, @D )	    //update map with obstacle
 	}
 	Goto  prepareExploreEdge //exploreTableBoundary
 	
 	
 	State prepareExploreEdge{
 		run itunibo.planner.moveUtils.setPosition(myself)
 		solve( curPos(X,Y,D) )
["
CurX      = Integer.parseInt( getCurSol(\"X\").toString()  )  
CurY      = Integer.parseInt( getCurSol(\"Y\").toString()  )
Direction = getCurSol(\"D\").toString()
"]   		

		println("prepareExploreEdge CurX=$CurX, CurY=$CurY, dir=$Direction")
		run itunibo.planner.plannerUtil.showMap()	
		//solve( dialog(F) )
		
//		if " (Direction == \"rightDir\" || Direction == \"upDir\") "{
	  		forward resourcemodel -m modelChange : modelChange(robot,d) 
			delayVar RotateTime //rotate 
			forward resourcemodel -m modelChange : modelChange(robot,h) //stop	
			run itunibo.planner.moveUtils.doPlannedMove(myself, "d" )	    //update map
			delayVar PauseTime 		
//		}
// 		if " Direction == \"downDir\""{
//		  	forward resourcemodel -m modelChange : modelChange(robot,a) 
//			delayVar RotateTime //rotate 
//			forward resourcemodel -m modelChange : modelChange(robot,h) //stop	
//			run itunibo.planner.moveUtils.doPlannedMove(myself, "a" )	    //update map
//			delayVar PauseTime 		
// 		}
		
	}
 	Goto exploreEdge
 	
 	State exploreEdge{ //waw
		println("exploreEdge (waw) ")
   		forward resourcemodel -m modelChange : modelChange(robot,w) 
		delayVar StepTime 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop	
		run itunibo.planner.moveUtils.doPlannedMove(myself, "w" )	    //update map
		delayVar PauseTime 		
 
   		forward resourcemodel -m modelChange : modelChange(robot,a) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop	
		run itunibo.planner.moveUtils.doPlannedMove(myself, "a" )	    //update map
		delayVar PauseTime 		
		
		//solve( dialog(F) )
		
//last w could fail
		run itunibo.planner.plannerUtil.startTimer()
		forward onestepahead -m onestep : onestep($StepTime)	
	}
	Transition t0   whenMsg stepOk   -> endOfEdge   
					whenMsg stepFail -> tableFound //exploreEdge 
 	
 	State endOfEdge{
 		println("endOfEdge ")
 		run itunibo.planner.moveUtils.doPlannedMove(myself, "w" )	    //update map
 		run itunibo.planner.moveUtils.setPosition(myself)
 		solve( curPos(X,Y,D) )
["
CurX      = Integer.parseInt( getCurSol(\"X\").toString()  )  
CurY      = Integer.parseInt( getCurSol(\"Y\").toString()  )
Direction = getCurSol(\"D\").toString()
"]   		
		run itunibo.planner.plannerUtil.showMap()	
 		//solve( dialog(F) )
 	}
 	//Goto  endOfExploreBoundary if "(Direction == \"downDir\")" else exploreEdge
 	Goto  backToHome if "(Direction == \"downDir\")" else exploreEdge
 	
 	
	State endOfExploreBoundary{
		println("endOfExploreBoundary : EXPLORATION ENDS")
		run itunibo.planner.plannerUtil.saveMap("roomMapWithTable")
 	}
 	
	State backToHome{
		println("&&&  backToHome")
 		solve( retractall( move(_) ))		//clean the actor kb
 		run itunibo.planner.plannerUtil.setGoal(0,0)
  		run itunibo.planner.moveUtils.doPlan( myself )
 		//solve( dialog(F) )
   	} 
	Goto executePlannedActions //doGoHomeActions 


	State executePlannedActions{ 
		//solve( showMoves ) 
		solve( retract( move(M) ) ) 
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() 
              curmoveIsForward=(Curmove == \"w\")
	        "]
		} else { ["Curmove = \"\"; curmoveIsForward=false"]  }  
		//println("executePlannedActions doing $Curmove")
 	}
	Goto checkAndDoAction  if "(Curmove.length>0) " else goalOk 

 	State goalOk{		  
 		println("ON THE TARGET CELL !!!")
		run itunibo.planner.plannerUtil.saveMap("roomMapWithTable")
 		run itunibo.planner.moveUtils.setPosition(myself)
 		solve( curPos(X,Y,D) )
["
CurX      = Integer.parseInt( getCurSol(\"X\").toString()  )  
CurY      = Integer.parseInt( getCurSol(\"Y\").toString()  )
Direction = getCurSol(\"D\").toString()
"]   		
		println("AT HOME: CurX=$CurX, CurY=$CurY, dir=$Direction")
		
 	}
  	
 	//Execute the move if it is a rotation or halt
	State checkAndDoAction{	 }
	Goto doForwardMove if "curmoveIsForward" else doTheMove
	
	State doTheMove{
//		if "Curmove==\"a\"" { forward resourcemodel -m modelChange : modelChange(robot,l) }
//		if "Curmove==\"d\"" { forward resourcemodel -m modelChange : modelChange(robot,r) }
//		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
  		forward resourcemodel -m modelChange : modelChange(robot,$Curmove) 
		delayVar RotateTime //rotate 
		forward resourcemodel -m modelChange : modelChange(robot,h) //stop
		run itunibo.planner.moveUtils.doPlannedMove(myself, Curmove)
 		delayVar PauseTime		
		//println("doTheMove DONE $Curmove")
 		//solve( dialog(F) )	//to CALIBRATE rotation time
	}
	Goto executePlannedActions 
	
	//Delegate a forward move to onestepahead
	State doForwardMove{
		run itunibo.planner.plannerUtil.startTimer()
		forward onestepahead -m onestep : onestep($StepTime)	
	}
	Transition t0   whenMsg stepOk   -> handleStepOk   
					whenMsg stepFail -> hadleStepFail 
 	
    	
	State handleStepOk{
		run itunibo.planner.moveUtils.doPlannedMove(myself, "w")	
		delayVar PauseTime	
	}
	Goto executePlannedActions
	
 	State hadleStepFail{ 
		println("NEVER HERE!!!")
	}
	
}	
 
/*
 * ====================================================================
 * onestepahead
 * ====================================================================
 */
QActor onestepahead context ctxRoomExplore {
[" var foundObstacle = false; var StepTime = 0L"]  
	State s0 initial {	   
		["foundObstacle = false "]
	} 
	Transition t0 whenMsg onestep -> doMoveForward
	
	State doMoveForward{		  
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toLong()"]
 			forward resourcemodel -m modelChange : modelChange(robot,w)
			run itunibo.planner.plannerUtil.startTimer()
		}
	} 
	Transition t0 whenTimeVar  StepTime -> endDoMoveForward		
 		          whenEvent sonarRobot  -> handleSonarRobot
		  
	State endDoMoveForward{
		forward resourcemodel -m modelChange : modelChange(robot,h)
		forward roomexplorer -m stepOk : stepOk(ok)  //answer
	}
	Goto s0
	
	//Substitute with an ad-hoc actor for a real robot
	State handleSonarRobot{  //before than the step time
		run itunibo.planner.moveUtils.setDuration(myself)
		printCurrentMessage
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
			["val distance = Integer.parseInt( payloadArg(0) ) 
              foundObstacle = (distance<20) "]  
   		}
	}
	Goto stepFail if "foundObstacle" else s0
	
	State stepFail{
		println("&&& onestepahead stepfail ")
		solve( wduration( TIME ) )
		forward roomexplorer -m stepFail : stepFail(obstacle,#TIME)  	
	}
	Goto s0
}    

