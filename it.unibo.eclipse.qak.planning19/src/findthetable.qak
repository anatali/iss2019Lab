/*
 * ASSUMPTION : the map of the (empty) room is available
 * GOAL       : find the position of the table
 */
System findthetable 
mqttBroker "localhost" : 1883  
 
Dispatch modelChange  : modelChange( TARGET, VALUE )   
Dispatch modelUpdate  : modelUpdate( TARGET, VALUE )

Dispatch stepOk          : stepOk(V)		//TODO eliminate  V
Dispatch stepFail        : stepFail(R,T) //R=ok | obstacle, T = time
Dispatch exploreStepOk   : exploreStepOk 
Dispatch exploreStepFail : exploreStepFail 

Dispatch moveButlerTo    : moveButlerTo(X,Y,D)  
Dispatch robotCmd        : robotCmd( CMD )	

//Event  sonarRobot     : sonar( DISTANCE )	     //from  sonar on robot 

Context ctxFindTheTable    ip [host="localhost" port=8038]                -mqtt 
Context ctxDummyForMind    ip [host="otherresourcelocalhost" port=8035]   -mqtt 

ExternalQActor resourcemodel  context ctxDummyForMind
//ExternalQActor onestepahead   context ctxDummyForMind
ExternalQActor basicrobot    context ctxDummyForMind

QActor tablefinder context ctxFindTheTable{      
["
var mapEmpty    = true
val inmapname   = \"roomMbot2\"  //  xxx \"roomMbot\" \"roomBoundary\"	 
val outmapname  = \"roomMbotWithTable2\"  // yyy  \"roomMbotWithTable\" roomMapWithTable		 
  
var StepCounter = 0

var ButlerPosX  	= 0 
var ButlerPosY  	= 0 
var ButlerDirection	= \"\" 
  
var NextPosX 	= 0
var NextPosY 	= 0

var GoingDown  = false
var GoingRight = false

"]	
	State s0 initial {	  
//	    solve( consult("moves.pl")	 )   //for dialog
 		run itunibo.planner.plannerUtil.initAI()
 		run itunibo.planner.moveUtils.loadRoomMap( myself,inmapname )	    
		["mapEmpty = itunibo.planner.moveUtils.mapIsEmpty()	"]		
 		if "! mapEmpty" {
	 		["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
				println(MapStr)
			"]
	 		forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
  		}
 	}
	Goto  warning if "mapEmpty"  else exploreStep  
	
	State warning{
		println("========================================")
		println("WARNING: map not found")
		println("Please run roomboundaryplanned")
		println("========================================")
	}

 	State exploreStep{
		["StepCounter = StepCounter + 1"]
		forward worker -m moveButlerTo : moveButlerTo($StepCounter,$StepCounter,AnyDir)
	} 
	Transition t0  whenMsg exploreStepOk   -> exploreStep
				   whenMsg exploreStepFail -> tableFound
				   
	State  tableFound{
		println("%%% findTable: TABLE FOUND")
		["
			ButlerPosX      = itunibo.planner.moveUtils.getPosX( myself )
			ButlerPosY      = itunibo.planner.moveUtils.getPosY( myself )
		    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
			GoingDown       = ButlerDirection.equals(\"downDir\")
			GoingRight      = ButlerDirection.equals(\"rightDir\")
			println(\"		tableFound Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection GoingDown=$GoingDown GoingRight=$GoingRight\")
			if( GoingDown ){
				NextPosX        = ButlerPosX-1
				NextPosY        = ButlerPosY+1
			}
			if( GoingRight ){
				NextPosX        = ButlerPosX+1
				NextPosY        = ButlerPosY-1
			}
 			println(\"		Butler goinPLEASE ENTER TO GO to ($NextPosX,$NextPosY) \"); readLine()

		"]
 			run itunibo.planner.moveUtils.showCurrentRobotState() 			
 			forward worker -m moveButlerTo : moveButlerTo($NextPosX,$NextPosY,AnyDir)
	} 
	Transition t0  whenMsg exploreStepOk  and  "GoingRight"  -> upBorder
				   whenMsg exploreStepOk  and  "GoingDown"  -> leftBorder
				   whenMsg exploreStepFail -> tableFound
	
	State upBorder{
		printCurrentMessage
 		["
			ButlerPosX = itunibo.planner.moveUtils.getPosX( myself )
			ButlerPosY = itunibo.planner.moveUtils.getPosY( myself )
		    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
			println(\"		upBorder Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection\")
			NextPosX   = ButlerPosX+1
			NextPosY   = ButlerPosY+1
 			println(\"		PLEASE ENTER TO GO to ($NextPosX,$NextPosY) \");readLine()
 		"]
 		forward worker -m moveButlerTo : moveButlerTo($NextPosX,$NextPosY,AnyDir)
	}
	Transition t0  whenMsg exploreStepOk   -> leftBorder
				   whenMsg exploreStepFail -> upBorder


	State leftBorder{
		printCurrentMessage
 		["
			ButlerPosX = itunibo.planner.moveUtils.getPosX( myself )
			ButlerPosY = itunibo.planner.moveUtils.getPosY( myself )
		    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
			GoingDown       = ButlerDirection.equals(\"downDir\")
			GoingRight      = ButlerDirection.equals(\"rightDir\")
			println(\"		tableFound Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection GoingDown=$GoingDown GoingRight=$GoingRight\")
			if( GoingDown ){
				NextPosX        = ButlerPosX+1
				NextPosY        = ButlerPosY+1
			}
			if( GoingRight ){
				NextPosX        = ButlerPosX-1
				NextPosY        = ButlerPosY+1
			}
  		"]
 		forward worker -m moveButlerTo : moveButlerTo($NextPosX,$NextPosY,AnyDir)
	}
	Transition t0  whenMsg exploreStepOk   -> endOfJob
				   whenMsg exploreStepFail and  "GoingDown" -> leftBorder


	State endOfJob{
		println("%%% findTable: endOfJob")		
		run itunibo.planner.plannerUtil.saveMap(outmapname)  
		run itunibo.planner.moveUtils.showCurrentRobotState()		
	}
}	

QActor worker  context ctxFindTheTable{     
["
var mapEmpty    = false
val mapname     = \"roomMbot\" //yyy  
var Curmove     = \"\" 
var curmoveIsForward = false 

//REAL ROBOT
var StepTime   = 1000 	 
var PauseTime  = 500 

//VIRTUAL ROBOT
//var StepTime   = 330	//for virtual
//var PauseTime  = 500

var PauseTimeL  = PauseTime.toLong()

var Tback       = 0

"]	 
	State s0 initial {	     
//	    solve( consult("moves.pl")	 )		//for dialog
		run itunibo.coap.client.resourceObserverCoapClient.create( "coap://localhost:5683/resourcemodel" )
 		run itunibo.planner.plannerUtil.initAI()
  		run itunibo.planner.moveUtils.loadRoomMap( myself, mapname )	
  		run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
  	}  
  	Goto doWork
  	
  	State doWork{
 	 	println("&&&  worker WAITS")		  		
  	}
	Transition t0 whenMsg moveButlerTo -> setGoalAndDo

  	State setGoalAndDo{
  		onMsg( moveButlerTo : moveButlerTo(X,Y,D) ) {
  			printCurrentMessage
  			["storeCurrentMessageForReply()"]  	//TODO: introduce a qak operation
  			run itunibo.planner.plannerUtil.setGoal(payloadArg(0),payloadArg(1))
  			run itunibo.planner.moveUtils.doPlan( myself )
  		}
  	}
  	Goto executePlannedActions   
  
	State executePlannedActions{ 
		//solve( showMoves ) 
		solve( retract( move(M) ) ) 
		ifSolved {  
			["Curmove = getCurSol(\"M\").toString() 
              curmoveIsForward=(Curmove == \"w\")
	        "]
		} else { ["Curmove = \"\"; curmoveIsForward=false"]  }  
		//println("		worker executePlannedActions doing $Curmove")
 	}
	Goto checkAndDoAction  if "(Curmove.length>0) " else goalOk 

 	State goalOk{		  
 		//run itunibo.planner.moveUtils.showCurrentRobotState()
	 	["	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  "]
	 	forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
	 	["replyToCaller(\"exploreStepOk\", \"exploreStepOk\")"]  //TODO: introduce a qak operation
	}
	Goto doWork  
  	
 	//Execute the move if it is a rotation or halt
	State checkAndDoAction{	 }
	Goto doForwardMove if "curmoveIsForward" else doTheMove
	  
	State doTheMove{
		if "Curmove.equals(\"a\")"{
 			run itunibo.planner.moveUtils.rotateLeft90( myself  ) //modifies also the planner state 				
			[" println(\"		PLEASE TUNE THE ROTATION LEFT\" ); readLine() "]
		}
		if "Curmove.equals(\"d\")"{
 			run itunibo.planner.moveUtils.rotateRight90( myself  ) //modifies also the planner state 
			[" println(\"		PLEASE TUNE THE ROTATION RIGHT\" ); readLine() "]
		}
  	}
	Goto executePlannedActions 
	
 	State doForwardMove{
 		delayVar PauseTimeL  //Otherwise is too fast, even with remote interaction
 		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime) //forwards to onestepahead
	} 
	Transition t0   whenMsg stepOk     -> handleStepOk   
					whenMsg stepFail   -> hadleStepFail 	
    
	State handleStepOk{
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
	}
	Goto executePlannedActions
	 
  	State hadleStepFail{ 
  		solve( retractall( move(M) ) ) 		//CLEAR THE MOVES!!!
 		onMsg( stepFail : stepFail(Obs,Time) ) { 
 			["Tback=payloadArg(1).toString().toInt() / 4 "]
 			println("		worker OBSTACLE TABLE FOUND $Tback / ${payloadArg(1).toString()} ")
 		}
 		//Return in cell
  	 	//IMPORTANT: the virtual robot could not work without a back step 		  
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, Tback)      		 
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)

	 	["replyToCaller(\"exploreStepFail\", \"exploreStepFail\")"]  //TODO: introduce a qak operation
	}
	Goto doWork
}	
 
 