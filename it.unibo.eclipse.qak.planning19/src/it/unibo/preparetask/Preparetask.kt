/* Generated by AN DISI Unibo */ 
package it.unibo.preparetask

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Preparetask ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  butlermind prepareTask")
					}
					 transition(edgeName="t06",targetState="doprepare",cond=whenDispatch("prepare"))
				}	 
				state("doprepare") { //this:State
					action { //it:State
						println("&&&  butlermind PREPARING")
					}
					 transition( edgeName="goto",targetState="manageFridge", cond=doswitch() )
				}	 
				state("manageFridge") { //this:State
					action { //it:State
						forward("startTask", "startTask(fridge)" ,"butlertask" ) 
					}
					 transition(edgeName="t07",targetState="managePaintry",cond=whenDispatch("taskDone"))
				}	 
				state("managePaintry") { //this:State
					action { //it:State
						forward("startTask", "startTask(paintry)" ,"butlertask" ) 
					}
					 transition(edgeName="t08",targetState="prepareDone",cond=whenDispatch("taskDone"))
				}	 
				state("prepareDone") { //this:State
					action { //it:State
					}
				}	 
			}
		}
}
