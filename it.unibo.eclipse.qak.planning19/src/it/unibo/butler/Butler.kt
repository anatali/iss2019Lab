/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var Tback       = 0
		var Direction   = "" 
		
		//REAL ROBOT
		//var StepTime   = 1000 	 
		//var PauseTime  = 500 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	//for virtual
		var PauseTime  = 250
		
		var PauseTimeL  = PauseTime.toLong()
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  butler STARTED")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('floorMap.pl')","") //set resVar	
						solve("showMap","") //set resVar	
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("moveAhead") { //this:State
					action { //it:State
						delay(PauseTimeL)
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime, "onestepahead" )
					}
					 transition(edgeName="t00",targetState="hadleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t01",targetState="hadleStepKo",cond=whenDispatch("stepFail"))
				}	 
				state("hadleStepOk") { //this:State
					action { //it:State
						solve("updateMapAfterStep","") //set resVar	
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("hadleStepKo") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(R,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toInt() / 2   
								println(" ................... BACK TIME= $Tback")
						}
						itunibo.planner.moveUtils.backToCompensate(myself ,Tback, PauseTime )
						solve("updateMapAfterStep","") //set resVar	
						forward("modelChange", "modelChange(robot,l)" ,"resourcemodel" ) 
						solve("changeDirection","") //set resVar	
						solve("robotdirection(D)","") //set resVar	
						Direction = getCurSol("D").toString()
						solve("showMap","") //set resVar	
					}
					 transition( edgeName="goto",targetState="endOfExploration", cond=doswitchGuarded({(Direction == "sud")}) )
					transition( edgeName="goto",targetState="tuning", cond=doswitchGuarded({! (Direction == "sud")}) )
				}	 
				state("tuning") { //this:State
					action { //it:State
						println(" ---- TUNING --- ")
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("endOfExploration") { //this:State
					action { //it:State
						println("EXPLORATION ENDS")
					}
				}	 
			}
		}
}
