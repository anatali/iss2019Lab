/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var MaxDimY = "6"
		var MaxDimX = "8"
		var Curmove = ""
		var curmoveIsForward = false
		var StepTime   = 700L	//long		//for real
		var RotateTime = 650L	//long		//for real 
		var PauseTime  = 500L 
		
		//var StepTime   = 330L	//for virtual
		//var RotateTime = 300L	//for virtual
		//var PauseTime  = 100L 
		
		var Direction = "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  butler STARTED")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('floorMap.pl')","") //set resVar	
						solve("showMap","") //set resVar	
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("moveAhead") { //this:State
					action { //it:State
						forward("onestep", "onestep($StepTime)" ,"butlerstep" ) 
					}
					 transition(edgeName="t00",targetState="hadleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t01",targetState="hadleStepKo",cond=whenDispatch("stepFail"))
				}	 
				state("hadleStepOk") { //this:State
					action { //it:State
						println("&&& moveAhead ok")
						solve("updateMapAfterStep","") //set resVar	
						solve("showMap","") //set resVar	
						delay(PauseTime)
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("hadleStepKo") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("&&& moveAhead failed")
						solve("showMap","") //set resVar	
						forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						solve("changeDirection","") //set resVar	
						solve("robotdirection(D)","") //set resVar	
						delay(PauseTime)
					}
					 transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({(getCurSol("D").toString() == "sud")}) )
					transition( edgeName="goto",targetState="tuning", cond=doswitchGuarded({! (getCurSol("D").toString() == "sud")}) )
				}	 
				state("tuning") { //this:State
					action { //it:State
						println(" ---- TUNING --- ")
						solve("dialog(F)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("EXPLRATION ENDS")
					}
				}	 
			}
		}
}
