/* Generated by AN DISI Unibo */ 
package it.unibo.roomexplorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomexplorer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var mapEmpty    = false
		var Tback       = 0L
		var stepCounter = 0 
		var Curmove     = ""
		var Direction   = "" 
		var MaxX        = 0
		var MaxY        = 0
		var CurX        = 0
		var CurY        = 0
		var GX          = 0
		var GY          = 0
		var TableFound  = false
		var curmoveIsForward = false
		var endTableEdge = false
		var NunOfTurn       = 0
		
		//var StepTime   = 1000L	//long		/ 
		////var RotateTime = 610L	//long		//300L	//for virtual
		//var PauseTime  = 500L 
		
		var StepTime   = 330L	//for virtual
		var RotateTime = 300L	//for virtual
		var PauseTime  = 500L 
		
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.loadRoomMap(myself ,"roomBoundary" )
						solve("mapdims(X,Y)","") //set resVar	
						mapEmpty = ( getCurSol("X").toString() == "0")
					}
					 transition( edgeName="goto",targetState="exploreBoundary", cond=doswitchGuarded({mapEmpty}) )
					transition( edgeName="goto",targetState="findTable", cond=doswitchGuarded({! mapEmpty}) )
				}	 
				state("exploreBoundary") { //this:State
					action { //it:State
						println("exploreBoundary")
						itunibo.planner.plannerUtil.showMap(  )
						solve("direction(D)","") //set resVar	
						println("DIRECTION: ${getCurSol("D").toString()}")
					}
					 transition( edgeName="goto",targetState="moveAhead", cond=doswitch() )
				}	 
				state("moveAhead") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
						itunibo.planner.plannerUtil.startTimer(  )
						forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
						delay(PauseTime)
					}
					 transition(edgeName="t00",targetState="moveAhead",cond=whenDispatch("stepOk"))
					transition(edgeName="t01",targetState="changeDirection",cond=whenDispatch("stepFail"))
				}	 
				state("changeDirection") { //this:State
					action { //it:State
						solve("direction(D)","") //set resVar	
						itunibo.planner.moveUtils.doPlannedMove(myself ,getCurSol("D").toString() )
						forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"a" )
						solve("direction(D)","") //set resVar	
						Direction = getCurSol("D").toString() 
						println("DIRECTION: ${getCurSol("D").toString()}")
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.saveMap( "roomMap"  )
						delay(PauseTime)
						solve("dialog(F)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="findTable", cond=doswitchGuarded({(Direction=="downDir")}) )
					transition( edgeName="goto",targetState="moveAhead", cond=doswitchGuarded({! (Direction=="downDir")}) )
				}	 
				state("findTable") { //this:State
					action { //it:State
						solve("mapdims(MaxX,MaxY)","") //set resVar	
						
						MaxX = Integer.parseInt( getCurSol("MaxX").toString() )  
						MaxY = Integer.parseInt( getCurSol("MaxY").toString() )  
						itunibo.planner.moveUtils.setPosition(myself)
						solve("curPos(X,Y)","") //set resVar	
						
						CurX = Integer.parseInt( getCurSol("X").toString() )  
						CurY = Integer.parseInt( getCurSol("Y").toString() )  
						println("findTable START at ($CurX,$CurY) dims($MaxX,$MaxY)")
					}
					 transition( edgeName="goto",targetState="stepRight", cond=doswitch() )
				}	 
				state("stepRight") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"a" )
						itunibo.planner.plannerUtil.startTimer(  )
						forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
						delay(PauseTime)
					}
					 transition(edgeName="t02",targetState="stepDown",cond=whenDispatch("stepOk"))
					transition(edgeName="t03",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("stepDown") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
						forward("modelChange", "modelChange(robot,d)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"d" )
						itunibo.planner.plannerUtil.startTimer(  )
						forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
						delay(PauseTime)
					}
					 transition(edgeName="t04",targetState="updateMapAfterStepDown",cond=whenDispatch("stepOk"))
					transition(edgeName="t05",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("updateMapAfterStepDown") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
					}
					 transition( edgeName="goto",targetState="stepRight", cond=doswitch() )
				}	 
				state("tableFound") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(Obs,Time)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toLong() / 2 
								println("TABLE FOUND ${payloadArg(1).toString()}")
						}
						forward("modelChange", "modelChange(robot,s)" ,"resourcemodel" ) 
						delay(Tback)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.setPosition(myself)
						solve("direction(D)","") //set resVar	
						itunibo.planner.moveUtils.doPlannedMove(myself ,getCurSol("D").toString() )
					}
					 transition( edgeName="goto",targetState="prepareExploreEdge", cond=doswitch() )
				}	 
				state("prepareExploreEdge") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.setPosition(myself)
						solve("curPos(X,Y,D)","") //set resVar	
						
						CurX      = Integer.parseInt( getCurSol("X").toString()  )  
						CurY      = Integer.parseInt( getCurSol("Y").toString()  )
						Direction = getCurSol("D").toString()
						println("prepareExploreEdge CurX=$CurX, CurY=$CurY, dir=$Direction")
						itunibo.planner.plannerUtil.showMap(  )
						solve("dialog(F)","") //set resVar	
						if( Direction == "rightDir"){ forward("modelChange", "modelChange(robot,d)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"d" )
						delay(PauseTime)
						 }
						if( Direction == "downDir"){ forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"a" )
						delay(PauseTime)
						 }
					}
					 transition( edgeName="goto",targetState="exploreEdge", cond=doswitch() )
				}	 
				state("exploreEdge") { //this:State
					action { //it:State
						println("exploreEdge (waw) ")
						forward("modelChange", "modelChange(robot,w)" ,"resourcemodel" ) 
						delay(StepTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
						delay(PauseTime)
						forward("modelChange", "modelChange(robot,a)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"a" )
						delay(PauseTime)
						solve("dialog(F)","") //set resVar	
						itunibo.planner.plannerUtil.startTimer(  )
						forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
					}
					 transition(edgeName="t06",targetState="endOfEdge",cond=whenDispatch("stepOk"))
					transition(edgeName="t07",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("endOfEdge") { //this:State
					action { //it:State
						println("endOfEdge ")
						solve("curPos(X,Y,D)","") //set resVar	
						
						CurX      = Integer.parseInt( getCurSol("X").toString()  )  
						CurY      = Integer.parseInt( getCurSol("Y").toString()  )
						Direction = getCurSol("D").toString()
						itunibo.planner.plannerUtil.showMap(  )
						solve("dialog(F)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="endOfExploreBoundary", cond=doswitchGuarded({(Direction == "downDir")}) )
					transition( edgeName="goto",targetState="exploreEdge", cond=doswitchGuarded({! (Direction == "downDir")}) )
				}	 
				state("endOfExploreBoundary") { //this:State
					action { //it:State
						println("endOfExploreBoundary : EXPLORATION ENDS")
					}
				}	 
				state("exploreTableBoundary") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.showMap(  )
						NunOfTurn = 0 
						itunibo.planner.moveUtils.setPosition(myself)
						solve("curPos(X,Y,D)","") //set resVar	
						
						CurX      = Integer.parseInt( getCurSol("X").toString()  )  
						CurY      = Integer.parseInt( getCurSol("Y").toString()  )
						Direction = getCurSol("D").toString()
						if( Direction == "rightDir" ){ GX =   CurX + 1; GY =   CurY + 1}
						if( Direction == "downDir"  ){ GX =   CurX + 1; GY =   CurY - 1}
						println("exploreTableBoundary ... CurX=$CurX, CurY=$CurY, Dir=$Direction, GX=$GX, GY=$GY")
					}
					 transition( edgeName="goto",targetState="exploreTableEdge", cond=doswitch() )
				}	 
				state("exploreTableEdge") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,d)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"d" )
						delay(PauseTime)
						forward("modelChange", "modelChange(robot,d)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"d" )
						delay(PauseTime)
						solve("direction(D)","") //set resVar	
						Direction = getCurSol("D").toString() 
						println("AVOID-OBSTACLE-DIRECTION: ${getCurSol("D").toString()}")
						itunibo.planner.plannerUtil.saveMap( "roomMap"  )
						solve("retractall(move(_))","") //set resVar	
						itunibo.planner.plannerUtil.resetGoal( GX, GY  )
						itunibo.planner.moveUtils.doPlan(myself)
						solve("dialog(F)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="doExploreEdge", cond=doswitch() )
				}	 
				state("doExploreEdge") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString() 
						              curmoveIsForward=(Curmove == "w")
						 }
						else
						{ Curmove = ""; curmoveIsForward=false
						 }
					}
					 transition( edgeName="goto",targetState="checkAndDoAction", cond=doswitchGuarded({(Curmove.length>0) }) )
					transition( edgeName="goto",targetState="edgeReached", cond=doswitchGuarded({! (Curmove.length>0) }) )
				}	 
				state("edgeReached") { //this:State
					action { //it:State
						solve("direction(D)","") //set resVar	
						
						Direction = getCurSol("D").toString()
						println("edgeReached-DIRECTION: ${getCurSol("D").toString()}")
						forward("modelChange", "modelChange(robot,l)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,"l" )
						delay(PauseTime)
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitch() )
				}	 
				state("checkAndDoAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitchGuarded({curmoveIsForward}) )
					transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({! curmoveIsForward}) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						forward("modelChange", "modelChange(robot,$Curmove)" ,"resourcemodel" ) 
						delay(RotateTime)
						forward("modelChange", "modelChange(robot,h)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,Curmove )
						itunibo.planner.moveUtils.setPosition(myself)
						solve("curPos(X,Y,D)","") //set resVar	
						println("doTheMove-DIRECTION: ${getCurSol("D").toString()}")
						delay(PauseTime)
					}
					 transition( edgeName="goto",targetState="doExploreEdge", cond=doswitch() )
				}	 
				state("doForwardMove") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.startTimer(  )
						forward("onestep", "onestep($StepTime)" ,"onecellforward" ) 
					}
					 transition(edgeName="t08",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t09",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
					}
					 transition( edgeName="goto",targetState="doExploreEdge", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						println("&&&  FOUND OBSTACLE")
						solve("direction(D)","") //set resVar	
						itunibo.planner.moveUtils.doPlannedMove(myself ,getCurSol("D").toString() )
					}
					 transition( edgeName="goto",targetState="exploreTableBoundary", cond=doswitch() )
				}	 
			}
		}
}
