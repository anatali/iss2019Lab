/* Generated by AN DISI Unibo */ 
package it.unibo.roomexplorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomexplorer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var mapEmpty    = true
		val inmapname   = "roomBoundary" // 	 
		val outmapname  = "xxx" //roomMapWithTable		 
		var Tback       = 0
		 
		var Curmove     = ""
		var Direction   = "" 
		var MaxX        = 0
		var MaxY        = 0
		var CurX        = 0
		var CurY        = 0
		 
		var curmoveIsForward = false
		var stepRoundTable   = 0
		//REAL ROBOT
		//var StepTime   = 1000	 
		//var PauseTime  = 500L 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	 
		var PauseTime  = 250
		
		var PauseTimeL  = PauseTime.toLong()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.loadRoomMap(myself ,inmapname )
						mapEmpty = itunibo.planner.moveUtils.mapIsEmpty()	
						if(! mapEmpty){ 	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						 }
					}
					 transition( edgeName="goto",targetState="warning", cond=doswitchGuarded({mapEmpty}) )
					transition( edgeName="goto",targetState="findTable", cond=doswitchGuarded({! mapEmpty}) )
				}	 
				state("warning") { //this:State
					action { //it:State
						println("========================================")
						println("WARNING: map not found")
						println("Please run roomboundaryplanned")
						println("========================================")
					}
				}	 
				state("findTable") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotateLeft(myself ,PauseTime )
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t00",targetState="stepDown",cond=whenDispatch("stepOk"))
					transition(edgeName="t01",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("stepDown") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						itunibo.planner.moveUtils.rotateRight(myself ,PauseTime )
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t02",targetState="updateMapAfterStepDown",cond=whenDispatch("stepOk"))
					transition(edgeName="t03",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("updateMapAfterStepDown") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
					}
					 transition( edgeName="goto",targetState="findTable", cond=doswitch() )
				}	 
				state("tableFound") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(Obs,Time)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toInt() / 2 
								println("TABLE FOUND $Tback / ${payloadArg(1).toString()} ")
						}
						itunibo.planner.moveUtils.backToCompensate(myself ,Tback, PauseTime )
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
					}
					 transition( edgeName="goto",targetState="prepareToExploreEdge", cond=doswitch() )
				}	 
				state("prepareToExploreEdge") { //this:State
					action { //it:State
						  Direction  = itunibo.planner.moveUtils.getDirection(myself) 
						if(Direction=="downDir"){ if(stepRoundTable==0){ println("Table found from north")
						itunibo.planner.moveUtils.rotateRight(myself ,PauseTime )
						itunibo.planner.moveUtils.moveAhead(myself ,StepTime, PauseTime )
						itunibo.planner.moveUtils.rotateLeft(myself ,PauseTime )
						 }
						else
						 { println("Following north border")
						 itunibo.planner.moveUtils.rotateRight(myself ,PauseTime )
						  }
						 }
						else
						 { println("Table found from east")
						 itunibo.planner.moveUtils.rotateRight(myself ,PauseTime )
						  }
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="exploreEdge", cond=doswitch() )
				}	 
				state("exploreEdge") { //this:State
					action { //it:State
						stepRoundTable++
						println("exploreEdge (waw) stepRoundTable=$stepRoundTable")
						itunibo.planner.moveUtils.moveAhead(myself ,StepTime, PauseTime )
						itunibo.planner.moveUtils.rotateLeft(myself ,PauseTime )
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t04",targetState="endOfEdge",cond=whenDispatch("stepOk"))
					transition(edgeName="t05",targetState="tableFound",cond=whenDispatch("stepFail"))
				}	 
				state("endOfEdge") { //this:State
					action { //it:State
						  Direction  = itunibo.planner.moveUtils.getDirection(myself) 
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
					}
					 transition( edgeName="goto",targetState="returnToHome", cond=doswitchGuarded({(Direction == "downDir")}) )
					transition( edgeName="goto",targetState="exploreEdge", cond=doswitchGuarded({! (Direction == "downDir")}) )
				}	 
				state("returnToHome") { //this:State
					action { //it:State
						println("&&&  returnToHome")
						solve("retractall(move(_))","") //set resVar	
						itunibo.planner.plannerUtil.setGoal( 0, 0  )
						itunibo.planner.moveUtils.doPlan(myself)
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString() 
						              curmoveIsForward=(Curmove == "w")
						 }
						else
						{ Curmove = ""; curmoveIsForward=false
						 }
					}
					 transition( edgeName="goto",targetState="checkAndDoAction", cond=doswitchGuarded({(Curmove.length>0) }) )
					transition( edgeName="goto",targetState="goalOk", cond=doswitchGuarded({! (Curmove.length>0) }) )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						println("ON THE TARGET CELL !!!")
						itunibo.planner.plannerUtil.saveMap( outmapname  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						
						val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						//println( MapStr ) 
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
				}	 
				state("checkAndDoAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitchGuarded({curmoveIsForward}) )
					transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({! curmoveIsForward}) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotate(myself ,Curmove, PauseTime )
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("doForwardMove") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t06",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t07",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.doPlannedMove(myself ,"w" )
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						println("NEVER HERE (since we are going home in a room without people) !!!")
					}
				}	 
			}
		}
}
