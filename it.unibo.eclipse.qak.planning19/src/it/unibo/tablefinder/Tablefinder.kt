/* Generated by AN DISI Unibo */ 
package it.unibo.tablefinder

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tablefinder ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var mapEmpty    = true
		val inmapname   = "roomMbot2"  //  xxx "roomMbot" "roomBoundary"	 
		val outmapname  = "roomMbotWithTable2"  // yyy  "roomMbotWithTable" roomMapWithTable		 
		  
		var StepCounter = 0
		
		var ButlerPosX  	= 0 
		var ButlerPosY  	= 0 
		var ButlerDirection	= "" 
		  
		var NextPosX 	= 0
		var NextPosY 	= 0
		
		var GoingDown  = false
		var GoingRight = false
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.loadRoomMap(myself ,inmapname )
						mapEmpty = itunibo.planner.moveUtils.mapIsEmpty()	
						if(! mapEmpty){ 	val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
										println(MapStr)
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						 }
					}
					 transition( edgeName="goto",targetState="warning", cond=doswitchGuarded({mapEmpty}) )
					transition( edgeName="goto",targetState="exploreStep", cond=doswitchGuarded({! mapEmpty}) )
				}	 
				state("warning") { //this:State
					action { //it:State
						println("========================================")
						println("WARNING: map not found")
						println("Please run roomboundaryplanned")
						println("========================================")
					}
				}	 
				state("exploreStep") { //this:State
					action { //it:State
						StepCounter = StepCounter + 1
						forward("moveButlerTo", "moveButlerTo($StepCounter,$StepCounter,AnyDir)" ,"worker" ) 
					}
					 transition(edgeName="t00",targetState="exploreStep",cond=whenDispatch("exploreStepOk"))
					transition(edgeName="t01",targetState="tableFound",cond=whenDispatch("exploreStepFail"))
				}	 
				state("tableFound") { //this:State
					action { //it:State
						println("%%% findTable: TABLE FOUND")
						
									ButlerPosX      = itunibo.planner.moveUtils.getPosX( myself )
									ButlerPosY      = itunibo.planner.moveUtils.getPosY( myself )
								    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
									GoingDown       = ButlerDirection.equals("downDir")
									GoingRight      = ButlerDirection.equals("rightDir")
									println("		tableFound Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection GoingDown=$GoingDown GoingRight=$GoingRight")
									if( GoingDown ){
										NextPosX        = ButlerPosX-1
										NextPosY        = ButlerPosY+1
									}
									if( GoingRight ){
										NextPosX        = ButlerPosX+1
										NextPosY        = ButlerPosY-1
									}
						 			println("		Butler goinPLEASE ENTER TO GO to ($NextPosX,$NextPosY) "); readLine()
						
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						forward("moveButlerTo", "moveButlerTo($NextPosX,$NextPosY,AnyDir)" ,"worker" ) 
					}
					 transition(edgeName="t02",targetState="upBorder",cond=whenDispatchGuarded("exploreStepOk",{GoingRight}))
					transition(edgeName="t03",targetState="leftBorder",cond=whenDispatchGuarded("exploreStepOk",{GoingDown}))
					transition(edgeName="t04",targetState="tableFound",cond=whenDispatch("exploreStepFail"))
				}	 
				state("upBorder") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									ButlerPosX = itunibo.planner.moveUtils.getPosX( myself )
									ButlerPosY = itunibo.planner.moveUtils.getPosY( myself )
								    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
									println("		upBorder Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection")
									NextPosX   = ButlerPosX+1
									NextPosY   = ButlerPosY+1
						 			println("		PLEASE ENTER TO GO to ($NextPosX,$NextPosY) ");readLine()
						forward("moveButlerTo", "moveButlerTo($NextPosX,$NextPosY,AnyDir)" ,"worker" ) 
					}
					 transition(edgeName="t05",targetState="leftBorder",cond=whenDispatch("exploreStepOk"))
					transition(edgeName="t06",targetState="upBorder",cond=whenDispatch("exploreStepFail"))
				}	 
				state("leftBorder") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									ButlerPosX = itunibo.planner.moveUtils.getPosX( myself )
									ButlerPosY = itunibo.planner.moveUtils.getPosY( myself )
								    ButlerDirection = itunibo.planner.moveUtils.getDirection( myself )
									GoingDown       = ButlerDirection.equals("downDir")
									GoingRight      = ButlerDirection.equals("rightDir")
									println("		tableFound Butler at ($ButlerPosX,$ButlerPosY) dir=$ButlerDirection GoingDown=$GoingDown GoingRight=$GoingRight")
									if( GoingDown ){
										NextPosX        = ButlerPosX+1
										NextPosY        = ButlerPosY+1
									}
									if( GoingRight ){
										NextPosX        = ButlerPosX-1
										NextPosY        = ButlerPosY+1
									}
						forward("moveButlerTo", "moveButlerTo($NextPosX,$NextPosY,AnyDir)" ,"worker" ) 
					}
					 transition(edgeName="t07",targetState="endOfJob",cond=whenDispatch("exploreStepOk"))
					transition(edgeName="t08",targetState="leftBorder",cond=whenDispatchGuarded("exploreStepFail",{GoingDown}))
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("%%% findTable: endOfJob")
						itunibo.planner.plannerUtil.saveMap( outmapname  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
				}	 
			}
		}
}
