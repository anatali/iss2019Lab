/*
 * ------------------------------------------------------
 * This is a model based on the MVC pattern
 * of the PROJECT of the system
 * ------------------------------------------------------
 */  
System ddrworkermvc   

mqttBroker "127.0.0.1" : 1883    //192.168.1.18
 	  
/*
 * 1) Information exchanged 
 */   
Event  envCond      : envCond( CONDTYPE )        //from the environment (simulated)
Event  sonar        : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment   
Event  sonarRobot   : sonar( DISTANCE )	         //from  sonar on robot 
Event  polar        : p( Distance, Angle )            
Event  local_userCmd: userCmd(X)		         //from GUI X = w | a | s | d | h 

Event  modelChanged     : modelChanged( TARGET, VALUE )
Dispatch  modelChange   : modelChange( TARGET, VALUE )


Context ctxRobotMvc         ip [host="localhost"   port=8025]  
Context ctxSonarHandler     ip [host="localhost"   port=8028]  -mqtt 

     
/*
 * console: 
 * REQ : human user interaction, sendMoveCmds
 */
QActor consolemvc context ctxRobotMvc{  
	State s0 initial {		 
		run resources.guiMvcSupport.create( myself , "")   //(1) REQ: human user interaction 	
		//emits  local_userCmd : userCmd( X )	X = w | a | s | d | h 
		//SHOW THE SYSTEM
		solve( consult("sysRules.pl")	 )       
		solve( consult("ddrworkermvc.pl")	 )  
		solve( showSystemConfiguration )
	}
	Goto waitCmd
	
	State waitCmd{  } 
	Transition t0 whenEvent local_userCmd -> handleUserCmd
	
	State handleUserCmd{ //does not handle alarms
		onMsg( local_userCmd : userCmd( X ) ) {
 		   forward resourcemodel -m modelChange : modelChange( robot,  $payloadArg(0)   )
		}	
	}
	Goto waitCmd
}

QActor resourcemodel context ctxRobotMvc{
	State s0 initial {		
		solve( consult("sysRules.pl")	 )       
		solve( consult("ddrWorkerResourceModel.pl")	 )
		solve( showResourceModel ) 		
	}
	Goto waitModelChange
	
	State waitModelChange{}
	Transition t0 
		whenEvent modelChange -> changeModel

	State changeModel{
		//printCurrentMessage
		onMsg( modelChange : modelChange( robot,V ) ) { // V= w | ...
			solve(  action( robot, move($payloadArg(1)) ) )  
			//actuate the move: is it model responsibility?
			//forward robotmvc -m robotCmd : robotCmd( $payloadArg(0) ) 
			ifSolved emit modelChanged : modelChanged(  robot,  $payloadArg(1)  )  
		} 
	}
	Goto waitModelChange
}


/*
 * robot: ACTUATOR of modelChanged events related to robot move
 * REQ : sendMoveCmds.move, handleConds
 */
QActor robotmvc context ctxRobotMvc{   
	State s0 initial {		
		println("robotplayer STARTS")	
		run resources.robotSupport.create( myself, "virtual" ) //(2) REQ : virtual or realmbot	
	}
	Goto waitCmd
	
	State waitCmd{  } 
	Transition t0 //whenMsg  robotCmd        -> handleCmd
				  whenEvent modelChanged  -> handleModelChanged
	              whenEvent envCond    -> handleCond
	              whenEvent sonarRobot ->  handleCond  //the robot hits
	
	State handleModelChanged{
		//printCurrentMessage
		onMsg ( modelChanged : modelChanged(robot,CMD) ){
			run resources.robotSupport.move( "msg(${payloadArg(1)})"  )
		}
	}
	Goto waitCmd
	
	State handleCond{
		printCurrentMessage
		//Logically correct, but perhaps no adequate as regards reactivity
		//run resources.robotSupport.move( "msg(stop)"  ) //do the action
		forward resourcemodel -m modelChange : modelChange( robot, h )
	}
	Goto waitCmd
}

/*
 * sonarhandler: looks at sonar events and emits info (via mqtt) for the radar
 * REQ : receiveSensorInfo, showSonarData
 */
QActor sonarhandlermvc context ctxSonarHandler{  
 	State init initial{
		println("sonardatahandler STARTS ")
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t0 whenEvent sonar      ->  sendToRadar
   	              whenEvent sonarRobot ->  sendToRadar
   	               
 	State sendToRadar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
			emit polar : p( $D, 90  )  
 		}
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
			emit polar : p( $D, 180  ) 
 		}
 	} 
 	Goto waitForEvents
}

 
