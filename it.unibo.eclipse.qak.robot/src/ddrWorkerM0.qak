/*
 * ------------------------------------------------------
 * This is the first model of the system
 * written as the result of the requirement analysis
 * ------------------------------------------------------
 */  
System ddrworker   

//mqttBroker "127.0.0.1" : 1883    //192.168.1.18
 	  
/*
 * 1) Information exchanged 
 */
Event    envCond   : envCond( CONDTYPE )            //from the environment (simulated)
Event    sonar     : sonar(SONAR, DISTANCE)	        //from sonar in the robot environment   
Event    sonarRobot: sonar( DISTANCE )	            //from  sonar on robot 

Dispatch userCmd   : userCmd(X)		                //from GUI to console
Dispatch robotCmd  : robotCmd(X)	                //from console to robot
Dispatch polar     : p( Distance, Angle )           //from robot to radar

/*
 * 2) Computational Nodes   
 */
//Context ctxConsoleReq   ip [host="192.168.1.4" port=8023]
Context ctxRobotReq     ip [host="localhost"   port=8025]    
//Context ctxRadarReq   ip [host="192.168.1.4" port=8027]    

/*
 * 3) System Actors
 */
 
/*
 * console: converts a userCmd into a robotCmd
 * REQ : human user interaction, sendMoveCmds
 */
QActor consolereq context ctxRobotReq{  //should work in ctxConsoleReq
	State s0 initial {		
		run resources.guiSupport.create( myself , "userCmd")   //(1) REQ: human user interaction 	 	
	}
	Goto waitCmd
	
	State waitCmd{ }
	Transition t0 whenMsg userCmd -> handleUserCmd
	
	State handleUserCmd{
		printCurrentMessage
		onMsg ( userCmd : userCmd(CMD) ) { 
			forward robotreq -m robotCmd : robotCmd($payloadArg(0))
		}
	}
	Goto waitCmd
}

/*
 * robot: executes robotCmd and handles envCond events
 * REQ : sendMoveCmds.move, handleConds
 */
QActor robotreq context ctxRobotReq{   
	State s0 initial {		
		println("robotplayer STARTS")	
		run resources.robotSupport.create( myself, "virtual" ) //(2) REQ : virtual or realmbot	
		run resources.robotSupport.move( "msg(a)"  )
		delay 1000
		run resources.robotSupport.move( "msg(d)"  )
		delay 1000
		run resources.robotSupport.move( "msg(h)"  )
	}
	Goto waitCmd
	
	State waitCmd{  } 
	Transition t0 whenMsg  robotCmd -> handleCmd
	              whenEvent envCond -> handleCond
	
	State handleCmd{
		onMsg ( robotCmd : robotCmd(CMD) ){			
			run resources.robotSupport.move( "msg(${payloadArg(0)})"  )
			//println("msg(${payloadArg(0)})")
		}	
	}
	Goto waitCmd
	
	State handleCond{
		run resources.robotSupport.move( "msg(stop)"  )
	}
	Goto waitCmd
}

/*
 * sonarhandler: looks at sonar events and sends polar to radar
 * REQ : receiveSensorInfo, showSonarData
 */
QActor sonarhandler context ctxRobotReq{
 	State init initial{
		println("sonardatahandler STARTS ")
["connectToMqttBroker(\"tcp://127.0.0.1:1883\")
"]		
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t0 whenEvent sonar      ->  sendToRadar
   	              whenEvent sonarRobot ->  sendToRadar
   	               
 	State sendToRadar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){     
[" val D = Integer.parseInt( payloadArg(1) ) * 5"] 
			//forward radarreq -m polar : p( $D, 90  ) 
["val evtopic = \"unibo/qak/events\"
val evpolar = MsgUtil.buildEvent(\"$name\",\"polar\", \"p( $D, 90  )\").toString()
publish(evpolar, evtopic )
"]
 		}
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
[" val D = Integer.parseInt( payloadArg(0) ) * 5"] 
			//forward radarreq -m polar : p( $D, 180  ) 
 		}
 	} 
 	Goto waitForEvents
}

/*
 * Introspector
 */
QActor introspector context ctxRobotReq{
	State init initial{
		solve( consult("sysRules.pl")	 )       
		solve( consult("ddrworker.pl")	 )  
		solve( showSystemConfiguration )
	}
}
/*
 * radar: show polar data on a radar GUI (radarPojo)
 * REQ : showSonarData

QActor radarreq context ctxRobotReq{  //should work in ctxRadar
	State s0 initial {		
		//run resources.radarSupport.activate()	
		run radarPojo.radarSupport.setUpRadarGui()  //(3)	REUSE radarPojo
	}
	Goto waitMsg
	
	State waitMsg{}
	Transition t0 whenMsg   polar -> showPoint
	
	State showPoint{
		printCurrentMessage
		onMsg ( polar : p( D,A )){
			 run radarPojo.radarSupport.update( payloadArg(0), payloadArg(1)  )			 
		}
	}
	Goto waitMsg
}
 */
