/*
 * ------------------------------------------------------
 * This is the first model of the system
 * written as the result of the requirement analysis
 * ------------------------------------------------------
 */
System ddrWorker
/*
 * 1) Information exchanged
 */
Event    envCond   : envCond( CONDTYPE )            //from the environment (simulated)
Event    sonar     : sonar(SONAR, TARGET, DISTANCE)	//from (virtual) sonar   FIXED

Dispatch userCmd   : userCmd(X)		                //from GUI to console
Dispatch robotCmd  : robotCmd(X)	                //from console to robot
Dispatch polar     : p( Distance, Angle )           //from robot to radar

/*
 * 2) Computational Nodes
 */
Context ctxRobotReq ip [host="localhost" port=8025]
//Context ctxConsole   ip [host="localhost" port=8023]
//Context ctxRobot     ip [host="localhost" port=8025]
//Context ctxRadar     ip [host="localhost" port=8027]

/*
 * 3) System Actors
 */
 
/*
 * console: converts a userCmd into a robotCmd
 * REQ : human user interaction, sendMoveCmds
 */
QActor consolereq context ctxRobotReq{  //should work in ctxConsole
	State s0 initial {		
		run resources.guiSupport.create( myself , "userCmd")   //(1) REQ: human user interaction 	 	
	}
	Goto waitCmd
	
	State waitCmd{ }
	Transition t0 whenMsg userCmd -> handleUserCmd
	
	State handleUserCmd{
		//printCurrentMessage
		onMsg ( userCmd : userCmd(CMD) ) { 
			forward robotreq -m robotCmd : robotCmd($payloadArg(0))
		}
	}
	Goto waitCmd
}

/*
 * robot: executes robotCmd and handles envCond events
 * REQ : sendMoveCmds.move, handleConds
 */
QActor robotreq context ctxRobotReq{   
	State s0 initial {		
		println("robotplayer STARTS")	
		run resources.robotSupport.create( myself, "virtual" ) //(2) REQ : virtual or real	
	}
	Goto waitCmd
	
	State waitCmd{ }
	Transition t0 whenMsg  robotCmd -> handleCmd
	              whenEvent envCond -> handleCond
	
	State handleCmd{
		onMsg ( robotCmd : robotCmd(CMD) ){			
			run resources.robotSupport.move( "msg(${payloadArg(0)})"  )
		}	
	}
	Goto waitCmd
	
	State handleCond{
		run resources.robotSupport.move( "msg(stop)"  )
	}
	Goto waitCmd
}

/*
 * sonarhandler: looks at sonar events and sends polar to radar
 * REQ : receiveSensorInfo, showSonarData
 */
QActor sonarhandler context ctxRobotReq{
 	State init initial{
		println("sonardatahandler STARTS ")
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t0 whenEvent sonar ->  sendToRadar
   	  
 	State sendToRadar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar : sonar(SONAR,TARGET,DISTANCE ) ){     
			[" val D = Integer.parseInt( payloadArg(2) ) * 5"] 
			forward radarreq -m polar : p( $D, 90  ) 
 		}
 	} 
 	Goto waitForEvents
}

/*
 * radar: show polar data on a radar GUI (radarPojo)
 * REQ : showSonarData
 */
QActor radarreq context ctxRobotReq{  //should work in ctxRadar
	State s0 initial {		
		run resources.radarSupport.activate()	//(3)	REUSE radarPojo
	}
	Goto waitMsg
	
	State waitMsg{}
	Transition t0 whenMsg   polar -> showPoint
	
	State showPoint{
		printCurrentMessage
		onMsg ( polar : p( D,A )){
			 run resources.radarSupport.spot( payloadArg(0), payloadArg(1)  )			 
		}
	}
	Goto waitMsg
}

