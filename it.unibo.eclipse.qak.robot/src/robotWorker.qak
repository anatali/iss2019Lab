System robotWorker  

mqttBroker "127.0.0.1" : 1883    //192.168.1.18

Event    local_buttonCmd : local_buttonCmd(X)  
Event    collision : collision(X)
Event    sonar  	 : sonar(SONAR, TARGET, DISTANCE)	//From (virtual) sonar
Event    sonarDetect : sonarDetect(X)					//From (virtual robot) sonar
Event    realSonar   : sonar( DISTANCE )				//From real sonar on real robot

Event    polar       : p( Distance, Angle )  
Dispatch polar       : p( Distance, Angle )

Event    usercmd     : usercmd(X)
Dispatch usercmd     : usercmd(X) 

Dispatch sendToRobot : msg(X)
Dispatch robotCmd    : robotCmd(X)
Event    robotCmd    : robotCmd(X)
 
Context ctxWorker ip [host="localhost" port=8010] -mqtt
//Context ctxRadar ip  [host="localhost" port=8015] //192.168.1.18 -mqtt

QActor robotplayer context ctxWorker{  
	State s0 initial {		
		println("robotplayer STARTS")
		run resources.guiSupport.create( myself , "") 
		run resources.clientWenvObjTcp.initClientConn( myself, "localhost" ) 
		run resources.clientWenvObjTcp.sendMsg( "msg(moveleft)"  )
		delay 1000
		run resources.clientWenvObjTcp.sendMsg( "msg(moveright)"  )
 	}   
	Transition t0 whenMsg robotCmd     -> handleCmd  
				  whenEvent robotCmd   -> handleCmd
	
 	State handleCmd{
 		printCurrentMessage
		onMsg ( local_buttonCmd : local_buttonCmd(CMD) ){
			run resources.clientWenvObjTcp.sendMsg( "msg(${payloadArg(0)})"  )
		}		
 		onMsg ( robotCmd : robotCmd( usercmd(CMD) ) ){	
 			forward mind -m usercmd : payloadArg(0) 
 		}else
		onMsg ( robotCmd : robotCmd(CMD) ){			
			run resources.clientWenvObjTcp.sendMsg( "msg(${payloadArg(0)})"  )
		}
	}
 	Transition t1  whenEvent robotCmd  -> handleCmd 
		           //whenEvent sonar     -> handleSonar
		           
    State handleSonar{
    	run resources.clientWenvObjTcp.sendMsg( "msg(movebackward)"  )
    	delay 1000
    	run resources.clientWenvObjTcp.sendMsg( "msg(stop)"  )
    }
    Goto handleCmd
 }
 
 QActor mind context ctxWorker{ 
 	State s0 initial {		
 		printCurrentMessage
 	}
 	
 }
 
  QActor sonardatahandler context ctxWorker{
 	State init initial{
		println("sonardatahandler STARTS ")
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t1 whenTime 60000 -> endOfJob   
 		   whenEvent sonar       ->  sendToRadar
  		   whenEvent sonarDetect ->  showObstacle
 		  //whenEvent realSonar   ->  handleRealSonar
 	  
 	State sendToRadar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar : sonar(SONAR,TARGET,DISTANCE ) ){     
			//emit polar : p( $payloadArg(2), 90  )  //90 is the angle
			[" val D = Integer.parseInt( payloadArg(2) ) * 5"] 
			//forward radar -m  polar : p( $D, 90  ) 
			emit polar : p( $D, 90  ) 
 		}
 	} 
 	Goto waitForEvents
 	
 	State showObstacle{
 		println("sonardetector showObstacle")
 		//forward radar -m  polar : p( 70, 0  ) 
 	}
 	Goto waitForEvents
 	
 	State endOfJob{}
 }
 
 
 
 
 /*
  * 
  */
 
