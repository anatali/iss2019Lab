System basicrobot 

mqttBroker "192.168.43.229" : 1883    //192.168.1.18  192.168.43.229

Event  userCmd      : userCmd(X)	//from GUI X = w | a | s | d | h 
Event  sonar        : sonar(SONAR, DISTANCE)	 //from sonar in the robot environment   
Event  sonarRobot   : sonar( DISTANCE )	         //from  sonar on robot 
Event  polar        : p( Distance, Angle )            
 
Dispatch robotCmd   : robotCmd( CMD )

Context ctxBasicRobot ip [host="localhost" port=8005]   -mqtt
   
QActor basicrobot context ctxBasicRobot {	   
	State s0 initial {  
 		run itunibo.streams.sonarStreamPipe.create( myself ) //A stream pipe  
  		solve( consult("basicRobotConfig.pl") )   
 		solve( robot(R, PORT) )  //R = virtual | realmbot | realnano
  		ifSolved{ println( "USING ROBOT : ${getCurSol(\"R\")},  port= ${getCurSol(\"PORT\")} " ) }
  		 else{ println("no robot") }
   		ifSolved{ run itunibo.robot.robotSupport.create(myself, @R, @PORT ) }
//   		run itunibo.robot.robotSupport.move( "msg(a)" )
//   		delay 700
//   		run itunibo.robot.robotSupport.move( "msg(d)" )
//   		delay 700
//   		run itunibo.robot.robotSupport.move( "msg(h)" )
 	}  
	Goto waitCmd   
 	 
	State waitCmd{  } //userCmd comes from a console OUTSIDE this (sub)system
	Transition t0 whenEvent userCmd   -> handleUserCmd
		          whenMsg   robotCmd  -> handleUserCmd
	
	State handleUserCmd{ //does not handle alarms 
		printCurrentMessage 
		onMsg( robotCmd : robotCmd( MOVE ) ) { //MOVE = w | a | s | d | h
			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
		}	
		onMsg( userCmd : userCmd( MOVE ) ) { //MOVE = w | a | s | d | h
 			run itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})" ) 
		}	
	}  
	Goto waitCmd 
} 
 
QActor sonarhandler context ctxBasicRobot{  
 	State init initial{
		println("sonarhandler STARTS ... ")
	}         
	Goto waitForEvents
	   
	State waitForEvents{  }      
   	Transition t0 whenEvent sonar      ->  handleSonar
   	              whenEvent sonarRobot ->  handleSonar
   	               
 	State handleSonar{                      
 		printCurrentMessage                                        
 		onMsg ( sonar  : sonar( SONAR, DISTANCE ) ){    			
[" val D = Integer.parseInt( payloadArg(1) ) * 5"] //AMPLIFY
			emit polar : p( $D, 90  )  
 		}
 		onMsg ( sonarRobot : sonar( DISTANCE ) ){     
[" val D = Integer.parseInt( payloadArg(0) ) * 5"] //AMPLIFY
			emit polar : p( $D, 180  ) 
 		}
 	} 
 	Goto waitForEvents
}
     