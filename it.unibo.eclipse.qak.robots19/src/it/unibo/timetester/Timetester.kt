/* Generated by AN DISI Unibo */ 
package it.unibo.timetester

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timetester ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			var StartTime = 0L
				var EndTime   = 0L
				var Delta     = 0L
				var WaitTime  = 1000L
				var Counter   = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("timetester STARTS")
					}
					 transition( edgeName="goto",targetState="takeTime", cond=doswitch() )
				}	 
				state("takeTime") { //this:State
					action { //it:State
						StartTime = System.currentTimeMillis()
						stateTimer = TimerActor("timer_takeTime", 
							scope, context!!, "local_tout_timetester_takeTime", WaitTime )
					}
					 transition(edgeName="t00",targetState="handleTimeElapsed",cond=whenTimeout("local_tout_timetester_takeTime"))   
				}	 
				state("handleTimeElapsed") { //this:State
					action { //it:State
						EndTime = System.currentTimeMillis()
								  Counter++
								  Delta = EndTime - StartTime - WaitTime 
						println("timetester $Counter interval = $Delta")
					}
					 transition( edgeName="goto",targetState="takeTime", cond=doswitchGuarded({(Counter<=9)}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! (Counter<=9)}) )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("timetester ENDS")
					}
				}	 
			}
		}
}
