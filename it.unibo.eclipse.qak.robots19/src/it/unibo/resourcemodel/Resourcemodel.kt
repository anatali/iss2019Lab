/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodel ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var dobackstep = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('resourceModel.pl')","") //set resVar	
						solve("showResourceModel","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitModelChange", cond=doswitch() )
				}	 
				state("waitModelChange") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="changeModel",cond=whenDispatch("modelChange"))
				}	 
				state("changeModel") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelChange(TARGET,VALUE)"), Term.createTerm("modelChange(internal,backstep)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("model(_,_,state(movingForward))","") //set resVar	
								if(currentSolution.isSuccess()) dobackstep = true
								 		else{
								 			 dobackstep = false
								 		}
						}
						if( checkMsgContent( Term.createTerm("modelChange(TARGET,VALUE)"), Term.createTerm("modelChange(robot,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("action(robot,move(${payloadArg(1)}))","") //set resVar	
								if(currentSolution.isSuccess()) emit("modelChanged", "modelChanged(robot,${payloadArg(1)})" ) 
								solve("model(A,R,STATE)","") //set resVar	
								val RobotState = getCurSol("STATE") 
								emit("modelContent", "content(robot($RobotState))" ) 
						}
					}
					 transition( edgeName="goto",targetState="doBackStep", cond=doswitchGuarded({dobackstep}) )
					transition( edgeName="goto",targetState="waitModelChange", cond=doswitchGuarded({! dobackstep}) )
				}	 
				state("doBackStep") { //this:State
					action { //it:State
						solve("action(robot,move(s))","") //set resVar	
						emit("modelChanged", "modelChanged(robot,s)" ) 
						solve("model(A,R,STATE)","") //set resVar	
						var RobotState = getCurSol("STATE") 
						emit("modelContent", "content(robot($RobotState))" ) 
						delay(200) 
						solve("action(robot,move(h))","") //set resVar	
						emit("modelChanged", "modelChanged(robot,h)" ) 
						solve("model(A,R,STATE)","") //set resVar	
						RobotState = getCurSol("STATE") 
						emit("modelContent", "content(robot($RobotState))" ) 
						dobackstep = false
					}
					 transition( edgeName="goto",targetState="waitModelChange", cond=doswitch() )
				}	 
			}
		}
}
