/* Generated by AN DISI Unibo */ 
package it.unibo.robotmindnomvc

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmindnomvc ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var obstacle = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("ROBOT MIND STARTED")
						forward("robotCmd", "robotCmd(a)" ,"basicrobot" ) 
						delay(700) 
						forward("robotCmd", "robotCmd(d)" ,"basicrobot" ) 
						delay(700) 
						forward("robotCmd", "robotCmd(h)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleCmd",cond=whenEvent("robotCmd"))
					transition(edgeName="t01",targetState="handleEnvCond",cond=whenEvent("envCond"))
					transition(edgeName="t02",targetState="handleSonarRobot",cond=whenEvent("sonarRobot"))
				}	 
				state("handleCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("robotCmd(cmd)"), Term.createTerm("robotCmd(CMD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("robotCmd", "robotCmd(${payloadArg(0)})" ,"basicrobot" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleEnvCond") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("envCond(CONDTYPE)"), Term.createTerm("envCond(CMD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("robotCmd", "robotCmd(h)" ,"basicrobot" ) 
						}
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleSonarRobot") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								obstacle = Integer.parseInt( payloadArg(0) ) < 10 
						}
					}
					 transition( edgeName="goto",targetState="handeObstacle", cond=doswitchGuarded({obstacle}) )
					transition( edgeName="goto",targetState="waitCmd", cond=doswitchGuarded({! obstacle}) )
				}	 
				state("handeObstacle") { //this:State
					action { //it:State
						println("robotmindnomvc handeObstacle: going back START")
						forward("robotCmd", "robotCmd(s)" ,"basicrobot" ) 
						delay(300) 
						println("robotmindnomvc handeObstacle: going back STOP")
						forward("robotCmd", "robotCmd(h)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
