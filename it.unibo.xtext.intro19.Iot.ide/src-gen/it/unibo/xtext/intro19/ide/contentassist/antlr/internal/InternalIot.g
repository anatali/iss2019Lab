/*
 * generated by Xtext 2.16.0
 */
grammar InternalIot;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package it.unibo.xtext.intro19.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package it.unibo.xtext.intro19.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import it.unibo.xtext.intro19.services.IotGrammarAccess;

}
@parser::members {
	private IotGrammarAccess grammarAccess;

	public void setGrammarAccess(IotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleIotSystem
entryRuleIotSystem
:
{ before(grammarAccess.getIotSystemRule()); }
	 ruleIotSystem
{ after(grammarAccess.getIotSystemRule()); } 
	 EOF 
;

// Rule IotSystem
ruleIotSystem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIotSystemAccess().getGroup()); }
		(rule__IotSystem__Group__0)
		{ after(grammarAccess.getIotSystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIotSystemSpec
entryRuleIotSystemSpec
:
{ before(grammarAccess.getIotSystemSpecRule()); }
	 ruleIotSystemSpec
{ after(grammarAccess.getIotSystemSpecRule()); } 
	 EOF 
;

// Rule IotSystemSpec
ruleIotSystemSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIotSystemSpecAccess().getGroup()); }
		(rule__IotSystemSpec__Group__0)
		{ after(grammarAccess.getIotSystemSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrokerSpec
entryRuleBrokerSpec
:
{ before(grammarAccess.getBrokerSpecRule()); }
	 ruleBrokerSpec
{ after(grammarAccess.getBrokerSpecRule()); } 
	 EOF 
;

// Rule BrokerSpec
ruleBrokerSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrokerSpecAccess().getGroup()); }
		(rule__BrokerSpec__Group__0)
		{ after(grammarAccess.getBrokerSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMessage
entryRuleMessage
:
{ before(grammarAccess.getMessageRule()); }
	 ruleMessage
{ after(grammarAccess.getMessageRule()); } 
	 EOF 
;

// Rule Message
ruleMessage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMessageAccess().getAlternatives()); }
		(rule__Message__Alternatives)
		{ after(grammarAccess.getMessageAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDispatch
entryRuleDispatch
:
{ before(grammarAccess.getDispatchRule()); }
	 ruleDispatch
{ after(grammarAccess.getDispatchRule()); } 
	 EOF 
;

// Rule Dispatch
ruleDispatch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDispatchAccess().getGroup()); }
		(rule__Dispatch__Group__0)
		{ after(grammarAccess.getDispatchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Message__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMessageAccess().getEventParserRuleCall_0()); }
		ruleEvent
		{ after(grammarAccess.getMessageAccess().getEventParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMessageAccess().getDispatchParserRuleCall_1()); }
		ruleDispatch
		{ after(grammarAccess.getMessageAccess().getDispatchParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IotSystem__Group__0__Impl
	rule__IotSystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIotSystemAccess().getSystemKeyword_0()); }
	'System'
	{ after(grammarAccess.getIotSystemAccess().getSystemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IotSystem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIotSystemAccess().getSpecAssignment_1()); }
	(rule__IotSystem__SpecAssignment_1)
	{ after(grammarAccess.getIotSystemAccess().getSpecAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IotSystemSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IotSystemSpec__Group__0__Impl
	rule__IotSystemSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIotSystemSpecAccess().getNameAssignment_0()); }
	(rule__IotSystemSpec__NameAssignment_0)
	{ after(grammarAccess.getIotSystemSpecAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IotSystemSpec__Group__1__Impl
	rule__IotSystemSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIotSystemSpecAccess().getMqttBrokerAssignment_1()); }
	(rule__IotSystemSpec__MqttBrokerAssignment_1)?
	{ after(grammarAccess.getIotSystemSpecAccess().getMqttBrokerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IotSystemSpec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIotSystemSpecAccess().getMessageAssignment_2()); }
	(rule__IotSystemSpec__MessageAssignment_2)*
	{ after(grammarAccess.getIotSystemSpecAccess().getMessageAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BrokerSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrokerSpec__Group__0__Impl
	rule__BrokerSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrokerSpecAccess().getMqttBrokerKeyword_0()); }
	'mqttBroker'
	{ after(grammarAccess.getBrokerSpecAccess().getMqttBrokerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrokerSpec__Group__1__Impl
	rule__BrokerSpec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrokerSpecAccess().getBrokerHostAssignment_1()); }
	(rule__BrokerSpec__BrokerHostAssignment_1)
	{ after(grammarAccess.getBrokerSpecAccess().getBrokerHostAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrokerSpec__Group__2__Impl
	rule__BrokerSpec__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrokerSpecAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getBrokerSpecAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrokerSpec__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrokerSpecAccess().getBrokerPortAssignment_3()); }
	(rule__BrokerSpec__BrokerPortAssignment_3)
	{ after(grammarAccess.getBrokerSpecAccess().getBrokerPortAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventKeyword_0()); }
	'Event'
	{ after(grammarAccess.getEventAccess().getEventKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
	(rule__Event__NameAssignment_1)
	{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getEventAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getMsgAssignment_3()); }
	(rule__Event__MsgAssignment_3)
	{ after(grammarAccess.getEventAccess().getMsgAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dispatch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dispatch__Group__0__Impl
	rule__Dispatch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispatchAccess().getDispatchKeyword_0()); }
	'Dispatch'
	{ after(grammarAccess.getDispatchAccess().getDispatchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dispatch__Group__1__Impl
	rule__Dispatch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispatchAccess().getNameAssignment_1()); }
	(rule__Dispatch__NameAssignment_1)
	{ after(grammarAccess.getDispatchAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dispatch__Group__2__Impl
	rule__Dispatch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispatchAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getDispatchAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dispatch__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispatchAccess().getMsgAssignment_3()); }
	(rule__Dispatch__MsgAssignment_3)
	{ after(grammarAccess.getDispatchAccess().getMsgAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IotSystem__SpecAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIotSystemAccess().getSpecIotSystemSpecParserRuleCall_1_0()); }
		ruleIotSystemSpec
		{ after(grammarAccess.getIotSystemAccess().getSpecIotSystemSpecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIotSystemSpecAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getIotSystemSpecAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__MqttBrokerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIotSystemSpecAccess().getMqttBrokerBrokerSpecParserRuleCall_1_0()); }
		ruleBrokerSpec
		{ after(grammarAccess.getIotSystemSpecAccess().getMqttBrokerBrokerSpecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IotSystemSpec__MessageAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIotSystemSpecAccess().getMessageMessageParserRuleCall_2_0()); }
		ruleMessage
		{ after(grammarAccess.getIotSystemSpecAccess().getMessageMessageParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__BrokerHostAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrokerSpec__BrokerPortAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__MsgAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getMsgSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getEventAccess().getMsgSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dispatch__MsgAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDispatchAccess().getMsgSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getDispatchAccess().getMsgSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VARID : ('A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
