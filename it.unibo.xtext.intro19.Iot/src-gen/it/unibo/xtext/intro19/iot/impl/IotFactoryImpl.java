/**
 * generated by Xtext 2.16.0
 */
package it.unibo.xtext.intro19.iot.impl;

import it.unibo.xtext.intro19.iot.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IotFactoryImpl extends EFactoryImpl implements IotFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IotFactory init()
  {
    try
    {
      IotFactory theIotFactory = (IotFactory)EPackage.Registry.INSTANCE.getEFactory(IotPackage.eNS_URI);
      if (theIotFactory != null)
      {
        return theIotFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IotFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IotFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IotPackage.IOT_SYSTEM: return createIotSystem();
      case IotPackage.IOT_SYSTEM_SPEC: return createIotSystemSpec();
      case IotPackage.BROKER_SPEC: return createBrokerSpec();
      case IotPackage.MESSAGE: return createMessage();
      case IotPackage.EVENT: return createEvent();
      case IotPackage.DISPATCH: return createDispatch();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IotSystem createIotSystem()
  {
    IotSystemImpl iotSystem = new IotSystemImpl();
    return iotSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IotSystemSpec createIotSystemSpec()
  {
    IotSystemSpecImpl iotSystemSpec = new IotSystemSpecImpl();
    return iotSystemSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrokerSpec createBrokerSpec()
  {
    BrokerSpecImpl brokerSpec = new BrokerSpecImpl();
    return brokerSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dispatch createDispatch()
  {
    DispatchImpl dispatch = new DispatchImpl();
    return dispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IotPackage getIotPackage()
  {
    return (IotPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IotPackage getPackage()
  {
    return IotPackage.eINSTANCE;
  }

} //IotFactoryImpl
