/*
 * generated by Xtext 2.16.0
 */
grammar InternalIot;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package it.unibo.xtext.intro19.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.unibo.xtext.intro19.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.unibo.xtext.intro19.services.IotGrammarAccess;

}

@parser::members {

 	private IotGrammarAccess grammarAccess;

    public InternalIotParser(TokenStream input, IotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "IotSystem";
   	}

   	@Override
   	protected IotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleIotSystem
entryRuleIotSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIotSystemRule()); }
	iv_ruleIotSystem=ruleIotSystem
	{ $current=$iv_ruleIotSystem.current; }
	EOF;

// Rule IotSystem
ruleIotSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='System'
		{
			newLeafNode(otherlv_0, grammarAccess.getIotSystemAccess().getSystemKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIotSystemAccess().getSpecIotSystemSpecParserRuleCall_1_0());
				}
				lv_spec_1_0=ruleIotSystemSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIotSystemRule());
					}
					set(
						$current,
						"spec",
						lv_spec_1_0,
						"it.unibo.xtext.intro19.Iot.IotSystemSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIotSystemSpec
entryRuleIotSystemSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIotSystemSpecRule()); }
	iv_ruleIotSystemSpec=ruleIotSystemSpec
	{ $current=$iv_ruleIotSystemSpec.current; }
	EOF;

// Rule IotSystemSpec
ruleIotSystemSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIotSystemSpecAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIotSystemSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIotSystemSpecAccess().getMqttBrokerBrokerSpecParserRuleCall_1_0());
				}
				lv_mqttBroker_1_0=ruleBrokerSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIotSystemSpecRule());
					}
					set(
						$current,
						"mqttBroker",
						lv_mqttBroker_1_0,
						"it.unibo.xtext.intro19.Iot.BrokerSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIotSystemSpecAccess().getMessageMessageParserRuleCall_2_0());
				}
				lv_message_2_0=ruleMessage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIotSystemSpecRule());
					}
					add(
						$current,
						"message",
						lv_message_2_0,
						"it.unibo.xtext.intro19.Iot.Message");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBrokerSpec
entryRuleBrokerSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrokerSpecRule()); }
	iv_ruleBrokerSpec=ruleBrokerSpec
	{ $current=$iv_ruleBrokerSpec.current; }
	EOF;

// Rule BrokerSpec
ruleBrokerSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mqttBroker'
		{
			newLeafNode(otherlv_0, grammarAccess.getBrokerSpecAccess().getMqttBrokerKeyword_0());
		}
		(
			(
				lv_brokerHost_1_0=RULE_STRING
				{
					newLeafNode(lv_brokerHost_1_0, grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBrokerSpecRule());
					}
					setWithLastConsumed(
						$current,
						"brokerHost",
						lv_brokerHost_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getBrokerSpecAccess().getColonKeyword_2());
		}
		(
			(
				lv_brokerPort_3_0=RULE_INT
				{
					newLeafNode(lv_brokerPort_3_0, grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBrokerSpecRule());
					}
					setWithLastConsumed(
						$current,
						"brokerPort",
						lv_brokerPort_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMessageAccess().getEventParserRuleCall_0());
		}
		this_Event_0=ruleEvent
		{
			$current = $this_Event_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMessageAccess().getDispatchParserRuleCall_1());
		}
		this_Dispatch_1=ruleDispatch
		{
			$current = $this_Dispatch_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Event'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getEventAccess().getColonKeyword_2());
		}
		(
			(
				lv_msg_3_0=RULE_STRING
				{
					newLeafNode(lv_msg_3_0, grammarAccess.getEventAccess().getMsgSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleDispatch
entryRuleDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchRule()); }
	iv_ruleDispatch=ruleDispatch
	{ $current=$iv_ruleDispatch.current; }
	EOF;

// Rule Dispatch
ruleDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Dispatch'
		{
			newLeafNode(otherlv_0, grammarAccess.getDispatchAccess().getDispatchKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDispatchRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDispatchAccess().getColonKeyword_2());
		}
		(
			(
				lv_msg_3_0=RULE_STRING
				{
					newLeafNode(lv_msg_3_0, grammarAccess.getDispatchAccess().getMsgSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDispatchRule());
					}
					setWithLastConsumed(
						$current,
						"msg",
						lv_msg_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_VARID : ('A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
