/*
 * generated by Xtext 2.16.0
 */
package it.unibo.xtext.intro19.serializer;

import com.google.inject.Inject;
import it.unibo.xtext.intro19.iot.BrokerSpec;
import it.unibo.xtext.intro19.iot.Dispatch;
import it.unibo.xtext.intro19.iot.Event;
import it.unibo.xtext.intro19.iot.IotPackage;
import it.unibo.xtext.intro19.iot.IotSystem;
import it.unibo.xtext.intro19.iot.IotSystemSpec;
import it.unibo.xtext.intro19.services.IotGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class IotSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IotGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IotPackage.BROKER_SPEC:
				sequence_BrokerSpec(context, (BrokerSpec) semanticObject); 
				return; 
			case IotPackage.DISPATCH:
				sequence_Dispatch(context, (Dispatch) semanticObject); 
				return; 
			case IotPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case IotPackage.IOT_SYSTEM:
				sequence_IotSystem(context, (IotSystem) semanticObject); 
				return; 
			case IotPackage.IOT_SYSTEM_SPEC:
				sequence_IotSystemSpec(context, (IotSystemSpec) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BrokerSpec returns BrokerSpec
	 *
	 * Constraint:
	 *     (brokerHost=STRING brokerPort=INT)
	 */
	protected void sequence_BrokerSpec(ISerializationContext context, BrokerSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.BROKER_SPEC__BROKER_HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.BROKER_SPEC__BROKER_HOST));
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.BROKER_SPEC__BROKER_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.BROKER_SPEC__BROKER_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0(), semanticObject.getBrokerHost());
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0(), semanticObject.getBrokerPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Dispatch
	 *     Dispatch returns Dispatch
	 *
	 * Constraint:
	 *     (name=ID msg=STRING)
	 */
	protected void sequence_Dispatch(ISerializationContext context, Dispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDispatchAccess().getMsgSTRINGTerminalRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID msg=STRING)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getMsgSTRINGTerminalRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotSystemSpec returns IotSystemSpec
	 *
	 * Constraint:
	 *     (name=ID mqttBroker=BrokerSpec? message+=Message*)
	 */
	protected void sequence_IotSystemSpec(ISerializationContext context, IotSystemSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IotSystem returns IotSystem
	 *
	 * Constraint:
	 *     spec=IotSystemSpec
	 */
	protected void sequence_IotSystem(ISerializationContext context, IotSystem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.IOT_SYSTEM__SPEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.IOT_SYSTEM__SPEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIotSystemAccess().getSpecIotSystemSpecParserRuleCall_1_0(), semanticObject.getSpec());
		feeder.finish();
	}
	
	
}
